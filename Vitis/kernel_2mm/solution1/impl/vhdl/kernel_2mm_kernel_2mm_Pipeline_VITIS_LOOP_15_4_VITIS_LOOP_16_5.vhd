-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_2mm_kernel_2mm_Pipeline_VITIS_LOOP_15_4_VITIS_LOOP_16_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tmp_ce0 : OUT STD_LOGIC;
    tmp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tmp_ce1 : OUT STD_LOGIC;
    tmp_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_we0 : OUT STD_LOGIC;
    D_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    beta : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_2mm_kernel_2mm_Pipeline_VITIS_LOOP_15_4_VITIS_LOOP_16_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln15_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln15_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_fu_414_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_reg_838 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_2_fu_482_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_2_reg_847 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_12_fu_506_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_12_reg_869 : STD_LOGIC_VECTOR (6 downto 0);
    signal D_addr_reg_885 : STD_LOGIC_VECTOR (6 downto 0);
    signal D_addr_reg_885_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal D_load_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_14_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_13_fu_611_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_13_reg_930 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_1_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_5_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_5_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_6_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_6_reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_1_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_1_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_3_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_3_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_4_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_4_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_7_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_2_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_2_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_8_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_9_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln19_2_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln19_3_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_19_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_20_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_7_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln19_8_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_15_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_4_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln19_5_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_16_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_17_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_6_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln19_9_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_18_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_21_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_10_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln19_11_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_22_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_23_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_757_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_1_fu_448_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten53_fu_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_9_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten53_load : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_369_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_361_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_fu_377_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln16_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_402_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_430_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_422_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_1_fu_438_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_464_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_456_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln17_fu_472_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_11_fu_442_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_10_fu_381_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln15_fu_495_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_16_fu_510_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_17_fu_521_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln17_fu_476_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln17_1_fu_532_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_4_fu_553_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_5_fu_563_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_14_fu_577_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_12_fu_580_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_1_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_2_fu_601_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_13_fu_614_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln19_14_fu_625_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln15_3_fu_640_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_6_fu_650_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_15_fu_660_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln19_18_fu_670_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_7_fu_696_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_8_fu_706_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_cast_fu_716_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_19_fu_728_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_1_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_6_fu_786_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_7_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_5_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_8_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_3_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_2mm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U12 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_311,
        din1 => reg_303,
        dout => grp_fu_324_p2);

    mul_32s_32s_32_1_1_U13 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_315,
        din1 => reg_307,
        dout => grp_fu_330_p2);

    mul_32s_32s_32_1_1_U14 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => D_load_reg_910,
        din1 => beta,
        dout => x_fu_636_p2);

    mul_32s_32s_32_1_1_U15 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => C_load_reg_950,
        din1 => reg_303,
        dout => mul_ln19_fu_680_p2);

    mul_32s_32s_32_1_1_U16 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_311,
        din1 => reg_319,
        dout => mul_ln19_5_fu_685_p2);

    mul_32s_32s_32_1_1_U17 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_315,
        din1 => empty_14_reg_925,
        dout => mul_ln19_6_fu_691_p2);

    mul_32s_32s_32_1_1_U18 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => C_load_1_reg_955,
        din1 => reg_307,
        dout => mul_ln19_1_fu_738_p2);

    mul_32s_32s_32_1_1_U19 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_315,
        din1 => reg_319,
        dout => mul_ln19_3_fu_743_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_2mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_387_p2 = ap_const_lv1_0))) then 
                    i_1_fu_98 <= select_ln15_1_fu_448_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_98 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten53_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_387_p2 = ap_const_lv1_0))) then 
                    indvar_flatten53_fu_102 <= add_ln15_9_fu_393_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten53_fu_102 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_94 <= ap_const_lv4_0;
            elsif (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                j_fu_94 <= add_ln16_fu_757_p2;
            end if; 
        end if;
    end process;

    reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    reg_319 <= tmp_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_319 <= tmp_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                C_load_1_reg_955 <= C_q0;
                C_load_reg_950 <= C_q1;
                empty_14_reg_925 <= tmp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_fu_387_p2 = ap_const_lv1_0))) then
                D_addr_reg_885 <= zext_ln17_1_fu_538_p1(7 - 1 downto 0);
                    select_ln15_2_reg_847(6 downto 1) <= select_ln15_2_fu_482_p3(6 downto 1);
                select_ln15_reg_838 <= select_ln15_fu_414_p3;
                    zext_ln19_12_reg_869(3 downto 0) <= zext_ln19_12_fu_506_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                D_addr_reg_885_pp0_iter1_reg <= D_addr_reg_885;
                add_ln19_2_reg_1040 <= add_ln19_2_fu_772_p2;
                icmp_ln15_reg_834 <= icmp_ln15_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                D_load_reg_910 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln19_4_reg_1030 <= add_ln19_4_fu_753_p2;
                add_ln19_reg_1025 <= add_ln19_fu_749_p2;
                mul_ln19_1_reg_1015 <= mul_ln19_1_fu_738_p2;
                mul_ln19_3_reg_1020 <= mul_ln19_3_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln19_5_reg_985 <= mul_ln19_5_fu_685_p2;
                mul_ln19_6_reg_990 <= mul_ln19_6_fu_691_p2;
                mul_ln19_reg_980 <= mul_ln19_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln19_7_reg_1035 <= grp_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln19_8_reg_1045 <= grp_fu_324_p2;
                mul_ln19_9_reg_1050 <= grp_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_303 <= tmp_q1;
                reg_311 <= C_q1;
                reg_315 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_307 <= tmp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_336 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                x_reg_945 <= x_fu_636_p2;
                    zext_ln19_13_reg_930(3 downto 0) <= zext_ln19_13_fu_611_p1(3 downto 0);
            end if;
        end if;
    end process;
    select_ln15_2_reg_847(0) <= '0';
    zext_ln19_12_reg_869(6 downto 4) <= "000";
    zext_ln19_13_reg_930(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    C_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln19_20_fu_527_p1, ap_block_pp0_stage1, zext_ln19_15_fu_586_p1, ap_block_pp0_stage2, zext_ln19_17_fu_631_p1, ap_block_pp0_stage3, zext_ln19_21_fu_675_p1, ap_block_pp0_stage4, zext_ln19_23_fu_733_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                C_address0 <= zext_ln19_23_fu_733_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                C_address0 <= zext_ln19_21_fu_675_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                C_address0 <= zext_ln19_17_fu_631_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                C_address0 <= zext_ln19_15_fu_586_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                C_address0 <= zext_ln19_20_fu_527_p1(7 - 1 downto 0);
            else 
                C_address0 <= "XXXXXXX";
            end if;
        else 
            C_address0 <= "XXXXXXX";
        end if; 
    end process;


    C_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln19_19_fu_516_p1, ap_block_pp0_stage1, j_1_cast_fu_573_p1, ap_block_pp0_stage2, zext_ln19_16_fu_620_p1, ap_block_pp0_stage3, zext_ln19_18_fu_665_p1, ap_block_pp0_stage4, zext_ln19_22_fu_723_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                C_address1 <= zext_ln19_22_fu_723_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                C_address1 <= zext_ln19_18_fu_665_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                C_address1 <= zext_ln19_16_fu_620_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                C_address1 <= j_1_cast_fu_573_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                C_address1 <= zext_ln19_19_fu_516_p1(7 - 1 downto 0);
            else 
                C_address1 <= "XXXXXXX";
            end if;
        else 
            C_address1 <= "XXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, D_addr_reg_885_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln17_1_fu_538_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            D_address0 <= D_addr_reg_885_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            D_address0 <= zext_ln17_1_fu_538_p1(7 - 1 downto 0);
        else 
            D_address0 <= "XXXXXXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_d0 <= std_logic_vector(unsigned(add_ln19_8_fu_795_p2) + unsigned(add_ln19_3_fu_777_p2));

    D_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            D_we0 <= ap_const_logic_1;
        else 
            D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_1_fu_591_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_2));
    add_ln15_2_fu_601_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_3));
    add_ln15_3_fu_640_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_4));
    add_ln15_4_fu_553_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_5));
    add_ln15_5_fu_563_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_6));
    add_ln15_6_fu_650_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_7));
    add_ln15_7_fu_696_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_8));
    add_ln15_8_fu_706_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_847) + unsigned(ap_const_lv7_9));
    add_ln15_9_fu_393_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten53_load) + unsigned(ap_const_lv7_1));
    add_ln15_fu_402_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln16_fu_757_p2 <= std_logic_vector(unsigned(select_ln15_reg_838) + unsigned(ap_const_lv4_1));
    add_ln17_1_fu_532_p2 <= std_logic_vector(unsigned(add_ln17_fu_476_p2) + unsigned(zext_ln19_12_fu_506_p1));
    add_ln17_fu_476_p2 <= std_logic_vector(unsigned(tmp_2_fu_456_p3) + unsigned(zext_ln17_fu_472_p1));
    add_ln19_10_fu_381_p2 <= std_logic_vector(unsigned(tmp_8_fu_361_p3) + unsigned(zext_ln19_fu_377_p1));
    add_ln19_11_fu_442_p2 <= std_logic_vector(unsigned(tmp_s_fu_422_p3) + unsigned(zext_ln19_1_fu_438_p1));
    add_ln19_12_fu_580_p2 <= std_logic_vector(unsigned(zext_ln19_14_fu_577_p1) + unsigned(ap_const_lv5_A));
    add_ln19_13_fu_614_p2 <= std_logic_vector(unsigned(zext_ln19_13_fu_611_p1) + unsigned(ap_const_lv6_14));
    add_ln19_14_fu_625_p2 <= std_logic_vector(unsigned(zext_ln19_13_fu_611_p1) + unsigned(ap_const_lv6_1E));
    add_ln19_15_fu_660_p2 <= std_logic_vector(unsigned(zext_ln19_13_reg_930) + unsigned(ap_const_lv6_28));
    add_ln19_16_fu_510_p2 <= std_logic_vector(unsigned(zext_ln19_12_fu_506_p1) + unsigned(ap_const_lv7_32));
    add_ln19_17_fu_521_p2 <= std_logic_vector(unsigned(zext_ln19_12_fu_506_p1) + unsigned(ap_const_lv7_3C));
    add_ln19_18_fu_670_p2 <= std_logic_vector(unsigned(zext_ln19_12_reg_869) + unsigned(ap_const_lv7_46));
    add_ln19_19_fu_728_p2 <= std_logic_vector(unsigned(zext_ln19_12_reg_869) + unsigned(ap_const_lv7_5A));
    add_ln19_1_fu_767_p2 <= std_logic_vector(unsigned(reg_336) + unsigned(mul_ln19_3_reg_1020));
    add_ln19_2_fu_772_p2 <= std_logic_vector(unsigned(add_ln19_1_fu_767_p2) + unsigned(mul_ln19_1_reg_1015));
    add_ln19_3_fu_777_p2 <= std_logic_vector(unsigned(add_ln19_2_reg_1040) + unsigned(add_ln19_reg_1025));
    add_ln19_4_fu_753_p2 <= std_logic_vector(unsigned(mul_ln19_5_reg_985) + unsigned(mul_ln19_6_reg_990));
    add_ln19_5_fu_781_p2 <= std_logic_vector(unsigned(add_ln19_4_reg_1030) + unsigned(reg_336));
    add_ln19_6_fu_786_p2 <= std_logic_vector(unsigned(mul_ln19_8_reg_1045) + unsigned(mul_ln19_9_reg_1050));
    add_ln19_7_fu_790_p2 <= std_logic_vector(unsigned(add_ln19_6_fu_786_p2) + unsigned(mul_ln19_7_reg_1035));
    add_ln19_8_fu_795_p2 <= std_logic_vector(unsigned(add_ln19_7_fu_790_p2) + unsigned(add_ln19_5_fu_781_p2));
    add_ln19_fu_749_p2 <= std_logic_vector(unsigned(mul_ln19_reg_980) + unsigned(x_reg_945));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln15_reg_834)
    begin
        if (((icmp_ln15_reg_834 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten53_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten53_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten53_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten53_load <= indvar_flatten53_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_94, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_94;
        end if; 
    end process;

    icmp_ln15_fu_387_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten53_load = ap_const_lv7_64) else "0";
    icmp_ln16_fu_408_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    j_1_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_reg_838),64));
    or_ln15_fu_495_p2 <= (select_ln15_2_fu_482_p3 or ap_const_lv7_1);
    select_ln15_1_fu_448_p3 <= 
        add_ln15_fu_402_p2 when (icmp_ln16_fu_408_p2(0) = '1') else 
        ap_sig_allocacmp_i;
    select_ln15_2_fu_482_p3 <= 
        add_ln19_11_fu_442_p2 when (icmp_ln16_fu_408_p2(0) = '1') else 
        add_ln19_10_fu_381_p2;
    select_ln15_fu_414_p3 <= 
        ap_const_lv4_0 when (icmp_ln16_fu_408_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_14_cast_fu_716_p3 <= (ap_const_lv3_5 & select_ln15_reg_838);
    tmp_1_fu_430_p3 <= (add_ln15_fu_402_p2 & ap_const_lv1_0);
    tmp_2_fu_456_p3 <= (select_ln15_1_fu_448_p3 & ap_const_lv3_0);
    tmp_3_fu_464_p3 <= (select_ln15_1_fu_448_p3 & ap_const_lv1_0);
    tmp_8_fu_361_p3 <= (ap_sig_allocacmp_i & ap_const_lv3_0);
    tmp_9_fu_369_p3 <= (ap_sig_allocacmp_i & ap_const_lv1_0);

    tmp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln19_3_fu_501_p1, ap_block_pp0_stage1, zext_ln19_8_fu_568_p1, ap_block_pp0_stage2, zext_ln19_5_fu_606_p1, ap_block_pp0_stage3, zext_ln19_9_fu_655_p1, ap_block_pp0_stage4, zext_ln19_11_fu_711_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                tmp_address0 <= zext_ln19_11_fu_711_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                tmp_address0 <= zext_ln19_9_fu_655_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                tmp_address0 <= zext_ln19_5_fu_606_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                tmp_address0 <= zext_ln19_8_fu_568_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_address0 <= zext_ln19_3_fu_501_p1(7 - 1 downto 0);
            else 
                tmp_address0 <= "XXXXXXX";
            end if;
        else 
            tmp_address0 <= "XXXXXXX";
        end if; 
    end process;


    tmp_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, zext_ln19_2_fu_490_p1, ap_block_pp0_stage0, zext_ln19_7_fu_558_p1, ap_block_pp0_stage1, zext_ln19_4_fu_596_p1, ap_block_pp0_stage2, zext_ln19_6_fu_645_p1, ap_block_pp0_stage3, zext_ln19_10_fu_701_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                tmp_address1 <= zext_ln19_10_fu_701_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                tmp_address1 <= zext_ln19_6_fu_645_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                tmp_address1 <= zext_ln19_4_fu_596_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                tmp_address1 <= zext_ln19_7_fu_558_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_address1 <= zext_ln19_2_fu_490_p1(7 - 1 downto 0);
            else 
                tmp_address1 <= "XXXXXXX";
            end if;
        else 
            tmp_address1 <= "XXXXXXX";
        end if; 
    end process;


    tmp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            tmp_ce1 <= ap_const_logic_1;
        else 
            tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_422_p3 <= (add_ln15_fu_402_p2 & ap_const_lv3_0);
    zext_ln17_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_532_p2),64));
    zext_ln17_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_464_p3),7));
    zext_ln19_10_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_7_fu_696_p2),64));
    zext_ln19_11_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_8_fu_706_p2),64));
    zext_ln19_12_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_fu_414_p3),7));
    zext_ln19_13_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_reg_838),6));
    zext_ln19_14_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_reg_838),5));
    zext_ln19_15_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_12_fu_580_p2),64));
    zext_ln19_16_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_13_fu_614_p2),64));
    zext_ln19_17_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_14_fu_625_p2),64));
    zext_ln19_18_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_15_fu_660_p2),64));
    zext_ln19_19_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_16_fu_510_p2),64));
    zext_ln19_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_430_p3),7));
    zext_ln19_20_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_17_fu_521_p2),64));
    zext_ln19_21_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_18_fu_670_p2),64));
    zext_ln19_22_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_cast_fu_716_p3),64));
    zext_ln19_23_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_19_fu_728_p2),64));
    zext_ln19_2_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_2_fu_482_p3),64));
    zext_ln19_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_fu_495_p2),64));
    zext_ln19_4_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_1_fu_591_p2),64));
    zext_ln19_5_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_2_fu_601_p2),64));
    zext_ln19_6_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_fu_640_p2),64));
    zext_ln19_7_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_fu_553_p2),64));
    zext_ln19_8_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_5_fu_563_p2),64));
    zext_ln19_9_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_6_fu_650_p2),64));
    zext_ln19_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_369_p3),7));
end behav;
