-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_2mm_kernel_2mm_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tmp_ce0 : OUT STD_LOGIC;
    tmp_we0 : OUT STD_LOGIC;
    tmp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    alpha : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_2mm_kernel_2mm_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln7_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln7_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln7_fu_459_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_reg_849 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_fu_471_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln7_reg_859 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln7_2_fu_505_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln7_2_reg_868 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln9_3_fu_529_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln9_3_reg_890 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln9_1_fu_618_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln9_1_reg_937 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln7_1_fu_683_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln7_1_reg_972 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln11_4_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_4_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_addr_reg_1003 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_2_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln11_2_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln11_3_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_16_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_17_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_7_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln11_8_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_12_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_4_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln11_5_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_13_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_14_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_6_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln11_9_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_15_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_18_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_10_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln11_11_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_19_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_20_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_4_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_fu_736_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_9_fu_450_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_426_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_418_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_fu_434_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_487_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_479_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_1_fu_495_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_11_fu_499_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_10_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln7_fu_518_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_16_fu_533_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_17_fu_544_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_4_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_5_fu_570_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln9_2_fu_584_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_12_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln7_1_fu_598_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_2_fu_608_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_13_fu_621_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_14_fu_632_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln7_3_fu_643_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_6_fu_653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_15_fu_663_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_18_fu_673_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_7_fu_688_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln7_8_fu_698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_708_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_19_fu_720_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_758_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_751_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln9_fu_765_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln9_fu_769_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln9_1_fu_775_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_5_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_8_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_3_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_2mm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_311,
        din1 => alpha,
        dout => grp_fu_327_p2);

    mul_32s_32s_32_1_1_U2 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_315,
        din1 => alpha,
        dout => grp_fu_332_p2);

    mul_32s_32s_32_1_1_U3 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_337,
        din1 => reg_319,
        dout => grp_fu_345_p2);

    mul_32s_32s_32_1_1_U4 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_341,
        din1 => reg_323,
        dout => grp_fu_351_p2);

    mul_32s_32s_32_1_1_U5 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_337,
        din1 => reg_303,
        dout => grp_fu_357_p2);

    mul_32s_32s_32_1_1_U6 : component kernel_2mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_341,
        din1 => reg_307,
        dout => grp_fu_363_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_2mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_98 <= ap_const_lv4_0;
            elsif (((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                i_fu_98 <= select_ln7_1_fu_683_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln7_fu_444_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_102 <= add_ln7_9_fu_450_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_94 <= ap_const_lv4_0;
            elsif (((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                j_fu_94 <= add_ln8_fu_736_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln11_2_reg_1013 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln11_4_reg_998 <= add_ln11_4_fu_730_p2;
                select_ln7_1_reg_972 <= select_ln7_1_fu_683_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln11_reg_1008 <= add_ln11_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_fu_444_p2 = ap_const_lv1_0))) then
                add_ln7_reg_849 <= add_ln7_fu_459_p2;
                icmp_ln8_reg_854 <= icmp_ln8_fu_465_p2;
                    select_ln7_2_reg_868(6 downto 1) <= select_ln7_2_fu_505_p3(6 downto 1);
                select_ln7_reg_859 <= select_ln7_fu_471_p3;
                    zext_ln9_3_reg_890(3 downto 0) <= zext_ln9_3_fu_529_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_840 <= ap_sig_allocacmp_i_1;
                icmp_ln7_reg_845 <= icmp_ln7_fu_444_p2;
                tmp_addr_reg_1003 <= zext_ln9_4_fu_780_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_303 <= A_q1;
                reg_307 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_311 <= B_q1;
                reg_315 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_319 <= A_q1;
                reg_323 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_337 <= grp_fu_327_p2;
                reg_341 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_369 <= grp_fu_345_p2;
                reg_373 <= grp_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_377 <= grp_fu_357_p2;
                reg_381 <= grp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_845 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    zext_ln9_1_reg_937(3 downto 0) <= zext_ln9_1_fu_618_p1(3 downto 0);
            end if;
        end if;
    end process;
    select_ln7_2_reg_868(0) <= '0';
    zext_ln9_3_reg_890(6 downto 4) <= "000";
    zext_ln9_1_reg_937(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln11_3_fu_524_p1, ap_block_pp0_stage1, zext_ln11_8_fu_575_p1, ap_block_pp0_stage2, zext_ln11_5_fu_613_p1, ap_block_pp0_stage3, zext_ln11_9_fu_658_p1, ap_block_pp0_stage4, zext_ln11_11_fu_703_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                A_address0 <= zext_ln11_11_fu_703_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_address0 <= zext_ln11_9_fu_658_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_address0 <= zext_ln11_5_fu_613_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address0 <= zext_ln11_8_fu_575_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_address0 <= zext_ln11_3_fu_524_p1(7 - 1 downto 0);
            else 
                A_address0 <= "XXXXXXX";
            end if;
        else 
            A_address0 <= "XXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln11_2_fu_513_p1, ap_block_pp0_stage0, zext_ln11_7_fu_565_p1, ap_block_pp0_stage1, zext_ln11_4_fu_603_p1, ap_block_pp0_stage2, zext_ln11_6_fu_648_p1, ap_block_pp0_stage3, zext_ln11_10_fu_693_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                A_address1 <= zext_ln11_10_fu_693_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                A_address1 <= zext_ln11_6_fu_648_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                A_address1 <= zext_ln11_4_fu_603_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address1 <= zext_ln11_7_fu_565_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_address1 <= zext_ln11_2_fu_513_p1(7 - 1 downto 0);
            else 
                A_address1 <= "XXXXXXX";
            end if;
        else 
            A_address1 <= "XXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln11_17_fu_550_p1, ap_block_pp0_stage1, zext_ln11_12_fu_593_p1, ap_block_pp0_stage2, zext_ln11_14_fu_638_p1, ap_block_pp0_stage3, zext_ln11_18_fu_678_p1, ap_block_pp0_stage4, zext_ln11_20_fu_725_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                B_address0 <= zext_ln11_20_fu_725_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_address0 <= zext_ln11_18_fu_678_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_address0 <= zext_ln11_14_fu_638_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address0 <= zext_ln11_12_fu_593_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address0 <= zext_ln11_17_fu_550_p1(7 - 1 downto 0);
            else 
                B_address0 <= "XXXXXXX";
            end if;
        else 
            B_address0 <= "XXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln11_16_fu_539_p1, ap_block_pp0_stage1, j_cast_fu_580_p1, ap_block_pp0_stage2, zext_ln11_13_fu_627_p1, ap_block_pp0_stage3, zext_ln11_15_fu_668_p1, ap_block_pp0_stage4, zext_ln11_19_fu_715_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                B_address1 <= zext_ln11_19_fu_715_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_address1 <= zext_ln11_15_fu_668_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_address1 <= zext_ln11_13_fu_627_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address1 <= j_cast_fu_580_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address1 <= zext_ln11_16_fu_539_p1(7 - 1 downto 0);
            else 
                B_address1 <= "XXXXXXX";
            end if;
        else 
            B_address1 <= "XXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_10_fu_438_p2 <= std_logic_vector(unsigned(tmp_1_fu_418_p3) + unsigned(zext_ln11_fu_434_p1));
    add_ln11_11_fu_499_p2 <= std_logic_vector(unsigned(tmp_3_fu_479_p3) + unsigned(zext_ln11_1_fu_495_p1));
    add_ln11_12_fu_587_p2 <= std_logic_vector(unsigned(zext_ln9_2_fu_584_p1) + unsigned(ap_const_lv5_A));
    add_ln11_13_fu_621_p2 <= std_logic_vector(unsigned(zext_ln9_1_fu_618_p1) + unsigned(ap_const_lv6_14));
    add_ln11_14_fu_632_p2 <= std_logic_vector(unsigned(zext_ln9_1_fu_618_p1) + unsigned(ap_const_lv6_1E));
    add_ln11_15_fu_663_p2 <= std_logic_vector(unsigned(zext_ln9_1_reg_937) + unsigned(ap_const_lv6_28));
    add_ln11_16_fu_533_p2 <= std_logic_vector(unsigned(zext_ln9_3_fu_529_p1) + unsigned(ap_const_lv7_32));
    add_ln11_17_fu_544_p2 <= std_logic_vector(unsigned(zext_ln9_3_fu_529_p1) + unsigned(ap_const_lv7_3C));
    add_ln11_18_fu_673_p2 <= std_logic_vector(unsigned(zext_ln9_3_reg_890) + unsigned(ap_const_lv7_46));
    add_ln11_19_fu_720_p2 <= std_logic_vector(unsigned(zext_ln9_3_reg_890) + unsigned(ap_const_lv7_5A));
    add_ln11_3_fu_791_p2 <= std_logic_vector(unsigned(add_ln11_2_reg_1013) + unsigned(add_ln11_reg_1008));
    add_ln11_4_fu_730_p2 <= std_logic_vector(unsigned(reg_369) + unsigned(reg_373));
    add_ln11_5_fu_795_p2 <= std_logic_vector(unsigned(add_ln11_4_reg_998) + unsigned(reg_377));
    add_ln11_8_fu_800_p2 <= std_logic_vector(unsigned(grp_fu_391_p2) + unsigned(add_ln11_5_fu_795_p2));
    add_ln11_fu_785_p2 <= std_logic_vector(unsigned(tmp_q0) + unsigned(reg_377));
    add_ln7_1_fu_598_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_2));
    add_ln7_2_fu_608_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_3));
    add_ln7_3_fu_643_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_4));
    add_ln7_4_fu_560_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_5));
    add_ln7_5_fu_570_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_6));
    add_ln7_6_fu_653_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_7));
    add_ln7_7_fu_688_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_8));
    add_ln7_8_fu_698_p2 <= std_logic_vector(unsigned(select_ln7_2_reg_868) + unsigned(ap_const_lv7_9));
    add_ln7_9_fu_450_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln7_fu_459_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln8_fu_736_p2 <= std_logic_vector(unsigned(select_ln7_reg_859) + unsigned(ap_const_lv4_1));
    add_ln9_1_fu_775_p2 <= std_logic_vector(unsigned(add_ln9_fu_769_p2) + unsigned(zext_ln9_3_reg_890));
    add_ln9_fu_769_p2 <= std_logic_vector(unsigned(tmp_5_fu_751_p3) + unsigned(zext_ln9_fu_765_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln7_reg_845)
    begin
        if (((icmp_ln7_reg_845 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_94, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_94;
        end if; 
    end process;

    grp_fu_385_p2 <= std_logic_vector(unsigned(reg_369) + unsigned(reg_373));
    grp_fu_391_p2 <= std_logic_vector(unsigned(grp_fu_385_p2) + unsigned(reg_381));
    icmp_ln7_fu_444_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_64) else "0";
    icmp_ln8_fu_465_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    j_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_reg_859),64));
    or_ln7_fu_518_p2 <= (select_ln7_2_fu_505_p3 or ap_const_lv7_1);
    select_ln7_1_fu_683_p3 <= 
        add_ln7_reg_849 when (icmp_ln8_reg_854(0) = '1') else 
        i_1_reg_840;
    select_ln7_2_fu_505_p3 <= 
        add_ln11_11_fu_499_p2 when (icmp_ln8_fu_465_p2(0) = '1') else 
        add_ln11_10_fu_438_p2;
    select_ln7_fu_471_p3 <= 
        ap_const_lv4_0 when (icmp_ln8_fu_465_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_1_fu_418_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv3_0);
    tmp_2_fu_426_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv1_0);
    tmp_3_fu_479_p3 <= (add_ln7_fu_459_p2 & ap_const_lv3_0);
    tmp_4_fu_487_p3 <= (add_ln7_fu_459_p2 & ap_const_lv1_0);
    tmp_5_fu_751_p3 <= (select_ln7_1_reg_972 & ap_const_lv3_0);
    tmp_6_fu_758_p3 <= (select_ln7_1_reg_972 & ap_const_lv1_0);
    tmp_7_cast_fu_708_p3 <= (ap_const_lv3_5 & select_ln7_reg_859);

    tmp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_addr_reg_1003, ap_block_pp0_stage0, ap_block_pp0_stage3, zext_ln9_4_fu_780_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                tmp_address0 <= tmp_addr_reg_1003;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_address0 <= zext_ln9_4_fu_780_p1(7 - 1 downto 0);
            else 
                tmp_address0 <= "XXXXXXX";
            end if;
        else 
            tmp_address0 <= "XXXXXXX";
        end if; 
    end process;


    tmp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= std_logic_vector(unsigned(add_ln11_8_fu_800_p2) + unsigned(add_ln11_3_fu_791_p2));

    tmp_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln11_10_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_7_fu_688_p2),64));
    zext_ln11_11_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_8_fu_698_p2),64));
    zext_ln11_12_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_12_fu_587_p2),64));
    zext_ln11_13_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_13_fu_621_p2),64));
    zext_ln11_14_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_14_fu_632_p2),64));
    zext_ln11_15_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_15_fu_663_p2),64));
    zext_ln11_16_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_16_fu_533_p2),64));
    zext_ln11_17_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_17_fu_544_p2),64));
    zext_ln11_18_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_18_fu_673_p2),64));
    zext_ln11_19_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_708_p3),64));
    zext_ln11_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_487_p3),7));
    zext_ln11_20_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_19_fu_720_p2),64));
    zext_ln11_2_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_2_fu_505_p3),64));
    zext_ln11_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln7_fu_518_p2),64));
    zext_ln11_4_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_1_fu_598_p2),64));
    zext_ln11_5_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_2_fu_608_p2),64));
    zext_ln11_6_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_3_fu_643_p2),64));
    zext_ln11_7_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_4_fu_560_p2),64));
    zext_ln11_8_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_5_fu_570_p2),64));
    zext_ln11_9_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_6_fu_653_p2),64));
    zext_ln11_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_426_p3),7));
    zext_ln9_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_reg_859),6));
    zext_ln9_2_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_reg_859),5));
    zext_ln9_3_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_fu_471_p3),7));
    zext_ln9_4_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_1_fu_775_p2),64));
    zext_ln9_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_758_p3),7));
end behav;
