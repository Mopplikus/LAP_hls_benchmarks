-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity histogram is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feature_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_ce0 : OUT STD_LOGIC;
    feature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist_ce0 : OUT STD_LOGIC;
    hist_we0 : OUT STD_LOGIC;
    hist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of histogram is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "histogram_histogram,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.814000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=383,HLS_SYN_LUT=309,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln13_fu_58_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_74 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln13_fu_64_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln13_reg_78 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_done : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_idle : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_ready : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_feature_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_feature_ce0 : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_weight_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_weight_ce0 : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_ce0 : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_we0 : STD_LOGIC;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_lcssa_phi_fu_40_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_lcssa_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component histogram_histogram_Pipeline_VITIS_LOOP_13_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        trunc_ln : IN STD_LOGIC_VECTOR (30 downto 0);
        feature_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        feature_ce0 : OUT STD_LOGIC;
        feature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        hist_ce0 : OUT STD_LOGIC;
        hist_we0 : OUT STD_LOGIC;
        hist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47 : component histogram_histogram_Pipeline_VITIS_LOOP_13_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start,
        ap_done => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_done,
        ap_idle => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_idle,
        ap_ready => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_ready,
        trunc_ln => trunc_ln13_reg_78,
        feature_address0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_feature_address0,
        feature_ce0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_feature_ce0,
        feature_q0 => feature_q0,
        weight_address0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_weight_address0,
        weight_ce0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_weight_ce0,
        weight_q0 => weight_q0,
        hist_address0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_address0,
        hist_ce0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_ce0,
        hist_we0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_we0,
        hist_d0 => grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_d0,
        hist_q0 => hist_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_ready = ap_const_logic_1)) then 
                    grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_lcssa_reg_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_lcssa_reg_36 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (icmp_ln13_reg_74 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_lcssa_reg_36 <= n;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln13_reg_74 <= icmp_ln13_fu_58_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln13_reg_78 <= trunc_ln13_fu_64_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_58_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_58_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(icmp_ln13_reg_74, grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_done = ap_const_logic_0) and (icmp_ln13_reg_74 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_lcssa_phi_fu_40_p4_assign_proc : process(n, icmp_ln13_reg_74, i_0_lcssa_reg_36, ap_CS_fsm_state3)
    begin
        if (((icmp_ln13_reg_74 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_i_0_lcssa_phi_fu_40_p4 <= n;
        else 
            ap_phi_mux_i_0_lcssa_phi_fu_40_p4 <= i_0_lcssa_reg_36;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_i_0_lcssa_phi_fu_40_p4;
    feature_address0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_feature_address0;
    feature_ce0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_feature_ce0;
    grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_ap_start_reg;
    hist_address0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_address0;
    hist_ce0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_ce0;
    hist_d0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_d0;
    hist_we0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_hist_we0;
    icmp_ln13_fu_58_p2 <= "1" when (signed(n) > signed(ap_const_lv32_0)) else "0";
    trunc_ln13_fu_64_p1 <= n(31 - 1 downto 0);
    weight_address0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_weight_address0;
    weight_ce0 <= grp_histogram_Pipeline_VITIS_LOOP_13_1_fu_47_weight_ce0;
end behav;
