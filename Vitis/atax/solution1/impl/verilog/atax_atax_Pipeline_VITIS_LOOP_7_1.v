// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module atax_atax_Pipeline_VITIS_LOOP_7_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        y_q0,
        y_address1,
        y_ce1,
        y_we1,
        y_d1,
        y_q1,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        tmp_address0,
        tmp_ce0,
        tmp_we0,
        tmp_d0,
        tmp_q0,
        x_load,
        x_load_1,
        x_load_2,
        x_load_3,
        x_load_4,
        x_load_5,
        x_load_6,
        x_load_7,
        x_load_8,
        x_load_9,
        x_load_10,
        x_load_11,
        x_load_12,
        x_load_13,
        x_load_14,
        x_load_15,
        x_load_16,
        x_load_17,
        x_load_18,
        x_load_19
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] y_q0;
output  [4:0] y_address1;
output   y_ce1;
output   y_we1;
output  [31:0] y_d1;
input  [31:0] y_q1;
output  [8:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [8:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [4:0] tmp_address0;
output   tmp_ce0;
output   tmp_we0;
output  [31:0] tmp_d0;
input  [31:0] tmp_q0;
input  [31:0] x_load;
input  [31:0] x_load_1;
input  [31:0] x_load_2;
input  [31:0] x_load_3;
input  [31:0] x_load_4;
input  [31:0] x_load_5;
input  [31:0] x_load_6;
input  [31:0] x_load_7;
input  [31:0] x_load_8;
input  [31:0] x_load_9;
input  [31:0] x_load_10;
input  [31:0] x_load_11;
input  [31:0] x_load_12;
input  [31:0] x_load_13;
input  [31:0] x_load_14;
input  [31:0] x_load_15;
input  [31:0] x_load_16;
input  [31:0] x_load_17;
input  [31:0] x_load_18;
input  [31:0] x_load_19;

reg ap_idle;
reg[4:0] y_address0;
reg y_ce0;
reg y_we0;
reg[31:0] y_d0;
reg[4:0] y_address1;
reg y_ce1;
reg y_we1;
reg[31:0] y_d1;
reg[8:0] A_address0;
reg A_ce0;
reg[8:0] A_address1;
reg A_ce1;
reg[4:0] tmp_address0;
reg tmp_ce0;
reg tmp_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln7_fu_649_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state24;
wire    ap_block_state24_pp0_stage23_iter0;
wire   [4:0] y_addr_18_reg_1444;
wire   [4:0] y_addr_19_reg_1449;
wire   [8:0] add_ln11_20_fu_686_p2;
reg   [8:0] add_ln11_20_reg_1457;
reg   [4:0] tmp_addr_reg_1489;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [31:0] t_reg_1504;
reg  signed [31:0] A_load_reg_1509;
reg  signed [31:0] A_load_3_reg_1515;
reg   [31:0] y_load_reg_1521;
reg   [31:0] y_load_1_reg_1526;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [31:0] mul_ln11_fu_753_p2;
reg   [31:0] mul_ln11_reg_1541;
reg  signed [31:0] A_load_1_reg_1546;
wire   [31:0] mul_ln11_3_fu_757_p2;
reg   [31:0] mul_ln11_3_reg_1552;
reg  signed [31:0] A_load_12_reg_1557;
reg   [31:0] y_load_2_reg_1563;
reg   [31:0] y_load_3_reg_1568;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [31:0] mul_ln11_1_fu_781_p2;
reg   [31:0] mul_ln11_1_reg_1583;
reg  signed [31:0] A_load_2_reg_1588;
reg  signed [31:0] A_load_4_reg_1594;
wire   [31:0] mul_ln11_12_fu_785_p2;
reg   [31:0] mul_ln11_12_reg_1600;
reg   [31:0] y_load_4_reg_1605;
reg   [31:0] y_load_5_reg_1610;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [31:0] mul_ln11_2_fu_809_p2;
reg   [31:0] mul_ln11_2_reg_1625;
wire   [31:0] mul_ln11_4_fu_813_p2;
reg   [31:0] mul_ln11_4_reg_1630;
reg  signed [31:0] A_load_5_reg_1635;
reg  signed [31:0] A_load_6_reg_1641;
wire   [31:0] add_ln11_11_fu_821_p2;
reg   [31:0] add_ln11_11_reg_1647;
reg   [31:0] y_load_6_reg_1652;
reg   [31:0] y_load_7_reg_1657;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire   [31:0] mul_ln11_5_fu_846_p2;
reg   [31:0] mul_ln11_5_reg_1672;
wire   [31:0] mul_ln11_6_fu_850_p2;
reg   [31:0] mul_ln11_6_reg_1677;
reg  signed [31:0] A_load_7_reg_1682;
reg  signed [31:0] A_load_8_reg_1688;
wire   [31:0] add_ln11_12_fu_858_p2;
reg   [31:0] add_ln11_12_reg_1694;
reg   [31:0] y_load_8_reg_1699;
reg   [31:0] y_load_9_reg_1704;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [31:0] mul_ln11_7_fu_883_p2;
reg   [31:0] mul_ln11_7_reg_1719;
wire   [31:0] mul_ln11_8_fu_887_p2;
reg   [31:0] mul_ln11_8_reg_1724;
reg  signed [31:0] A_load_9_reg_1729;
reg  signed [31:0] A_load_10_reg_1735;
wire   [31:0] add_ln11_13_fu_891_p2;
reg   [31:0] add_ln11_13_reg_1741;
reg   [31:0] y_load_10_reg_1746;
reg   [31:0] y_load_11_reg_1751;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire   [31:0] mul_ln11_9_fu_915_p2;
reg   [31:0] mul_ln11_9_reg_1766;
wire   [31:0] mul_ln11_10_fu_919_p2;
reg   [31:0] mul_ln11_10_reg_1771;
reg  signed [31:0] A_load_11_reg_1776;
reg  signed [31:0] A_load_13_reg_1782;
reg   [31:0] y_load_12_reg_1788;
reg   [31:0] y_load_13_reg_1793;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
wire   [31:0] mul_ln11_11_fu_943_p2;
reg   [31:0] mul_ln11_11_reg_1808;
wire   [31:0] mul_ln11_13_fu_947_p2;
reg   [31:0] mul_ln11_13_reg_1813;
reg  signed [31:0] A_load_14_reg_1818;
reg  signed [31:0] A_load_15_reg_1824;
reg   [31:0] y_load_14_reg_1830;
reg   [31:0] y_load_15_reg_1835;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [31:0] mul_ln11_14_fu_971_p2;
reg   [31:0] mul_ln11_14_reg_1850;
wire   [31:0] mul_ln11_15_fu_975_p2;
reg   [31:0] mul_ln11_15_reg_1855;
reg  signed [31:0] A_load_16_reg_1860;
reg  signed [31:0] A_load_17_reg_1866;
wire   [31:0] add_ln11_6_fu_983_p2;
reg   [31:0] add_ln11_6_reg_1872;
reg   [31:0] y_load_16_reg_1877;
reg   [31:0] y_load_17_reg_1882;
wire   [31:0] mul_ln11_16_fu_988_p2;
reg   [31:0] mul_ln11_16_reg_1887;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [31:0] mul_ln11_17_fu_992_p2;
reg   [31:0] mul_ln11_17_reg_1892;
reg  signed [31:0] A_load_18_reg_1897;
reg  signed [31:0] A_load_19_reg_1903;
wire   [31:0] add_ln11_7_fu_1000_p2;
reg   [31:0] add_ln11_7_reg_1909;
reg   [31:0] y_load_18_reg_1914;
reg   [31:0] y_load_19_reg_1919;
wire   [31:0] mul_ln11_18_fu_1005_p2;
reg   [31:0] mul_ln11_18_reg_1924;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [31:0] mul_ln11_19_fu_1009_p2;
reg   [31:0] mul_ln11_19_reg_1929;
wire  signed [31:0] add_ln11_19_fu_1061_p2;
reg  signed [31:0] add_ln11_19_reg_1934;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
wire   [31:0] mul_ln13_fu_1067_p2;
reg   [31:0] mul_ln13_reg_1959;
wire    ap_CS_fsm_state14;
wire    ap_block_state14_pp0_stage13_iter0;
wire   [31:0] mul_ln13_1_fu_1071_p2;
reg   [31:0] mul_ln13_1_reg_1964;
wire   [31:0] mul_ln13_2_fu_1085_p2;
reg   [31:0] mul_ln13_2_reg_1969;
wire    ap_CS_fsm_state15;
wire    ap_block_state15_pp0_stage14_iter0;
wire   [31:0] mul_ln13_3_fu_1089_p2;
reg   [31:0] mul_ln13_3_reg_1974;
wire   [31:0] mul_ln13_4_fu_1103_p2;
reg   [31:0] mul_ln13_4_reg_1979;
wire    ap_CS_fsm_state16;
wire    ap_block_state16_pp0_stage15_iter0;
wire   [31:0] mul_ln13_5_fu_1107_p2;
reg   [31:0] mul_ln13_5_reg_1984;
wire   [31:0] mul_ln13_6_fu_1121_p2;
reg   [31:0] mul_ln13_6_reg_1989;
wire    ap_CS_fsm_state17;
wire    ap_block_state17_pp0_stage16_iter0;
wire   [31:0] mul_ln13_7_fu_1125_p2;
reg   [31:0] mul_ln13_7_reg_1994;
wire   [31:0] mul_ln13_8_fu_1139_p2;
reg   [31:0] mul_ln13_8_reg_1999;
wire    ap_CS_fsm_state18;
wire    ap_block_state18_pp0_stage17_iter0;
wire   [31:0] mul_ln13_9_fu_1143_p2;
reg   [31:0] mul_ln13_9_reg_2004;
wire   [31:0] mul_ln13_10_fu_1157_p2;
reg   [31:0] mul_ln13_10_reg_2009;
wire    ap_CS_fsm_state19;
wire    ap_block_state19_pp0_stage18_iter0;
wire   [31:0] mul_ln13_11_fu_1161_p2;
reg   [31:0] mul_ln13_11_reg_2014;
wire   [31:0] mul_ln13_12_fu_1175_p2;
reg   [31:0] mul_ln13_12_reg_2019;
wire    ap_CS_fsm_state20;
wire    ap_block_state20_pp0_stage19_iter0;
wire   [31:0] mul_ln13_13_fu_1179_p2;
reg   [31:0] mul_ln13_13_reg_2024;
wire   [31:0] mul_ln13_14_fu_1193_p2;
reg   [31:0] mul_ln13_14_reg_2029;
wire    ap_CS_fsm_state21;
wire    ap_block_state21_pp0_stage20_iter0;
wire   [31:0] mul_ln13_15_fu_1197_p2;
reg   [31:0] mul_ln13_15_reg_2034;
wire   [31:0] mul_ln13_16_fu_1211_p2;
reg   [31:0] mul_ln13_16_reg_2039;
wire    ap_CS_fsm_state22;
wire    ap_block_state22_pp0_stage21_iter0;
wire   [31:0] mul_ln13_17_fu_1215_p2;
reg   [31:0] mul_ln13_17_reg_2044;
wire   [31:0] mul_ln13_18_fu_1229_p2;
reg   [31:0] mul_ln13_18_reg_2049;
wire    ap_CS_fsm_state23;
wire    ap_block_state23_pp0_stage22_iter0;
wire   [31:0] mul_ln13_19_fu_1233_p2;
reg   [31:0] mul_ln13_19_reg_2054;
wire   [63:0] zext_ln11_1_fu_692_p1;
wire   [63:0] zext_ln11_4_fu_703_p1;
wire   [63:0] i_cast_fu_661_p1;
wire   [63:0] zext_ln11_2_fu_718_p1;
wire   [63:0] zext_ln11_13_fu_728_p1;
wire   [63:0] zext_ln11_3_fu_738_p1;
wire   [63:0] zext_ln11_5_fu_748_p1;
wire   [63:0] zext_ln11_6_fu_766_p1;
wire   [63:0] zext_ln11_7_fu_776_p1;
wire   [63:0] zext_ln11_8_fu_794_p1;
wire   [63:0] zext_ln11_9_fu_804_p1;
wire   [63:0] zext_ln11_10_fu_831_p1;
wire   [63:0] zext_ln11_11_fu_841_p1;
wire   [63:0] zext_ln11_12_fu_868_p1;
wire   [63:0] zext_ln11_14_fu_878_p1;
wire   [63:0] zext_ln11_15_fu_900_p1;
wire   [63:0] zext_ln11_16_fu_910_p1;
wire   [63:0] zext_ln11_17_fu_928_p1;
wire   [63:0] zext_ln11_18_fu_938_p1;
wire   [63:0] zext_ln11_19_fu_956_p1;
wire   [63:0] zext_ln11_20_fu_966_p1;
reg   [4:0] i_fu_164;
wire   [4:0] add_ln7_fu_655_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
wire   [31:0] add_ln13_fu_1075_p2;
wire   [31:0] add_ln13_1_fu_1080_p2;
wire   [31:0] add_ln13_2_fu_1093_p2;
wire   [31:0] add_ln13_3_fu_1098_p2;
wire   [31:0] add_ln13_4_fu_1111_p2;
wire   [31:0] add_ln13_5_fu_1116_p2;
wire   [31:0] add_ln13_6_fu_1129_p2;
wire   [31:0] add_ln13_7_fu_1134_p2;
wire   [31:0] add_ln13_8_fu_1147_p2;
wire   [31:0] add_ln13_9_fu_1152_p2;
wire   [31:0] add_ln13_10_fu_1165_p2;
wire   [31:0] add_ln13_11_fu_1170_p2;
wire   [31:0] add_ln13_12_fu_1183_p2;
wire   [31:0] add_ln13_13_fu_1188_p2;
wire   [31:0] add_ln13_14_fu_1201_p2;
wire   [31:0] add_ln13_15_fu_1206_p2;
wire   [31:0] add_ln13_16_fu_1219_p2;
wire   [31:0] add_ln13_17_fu_1224_p2;
wire   [31:0] add_ln13_18_fu_1237_p2;
wire   [31:0] add_ln13_19_fu_1242_p2;
wire   [6:0] tmp_2_fu_674_p3;
wire   [8:0] tmp_1_fu_666_p3;
wire   [8:0] zext_ln11_fu_682_p1;
wire   [8:0] or_ln11_2_fu_697_p2;
wire   [8:0] or_ln11_fu_713_p2;
wire   [8:0] add_ln11_29_fu_723_p2;
wire   [8:0] or_ln11_1_fu_733_p2;
wire   [8:0] add_ln11_21_fu_743_p2;
wire   [8:0] add_ln11_22_fu_761_p2;
wire   [8:0] add_ln11_23_fu_771_p2;
wire   [8:0] add_ln11_24_fu_789_p2;
wire   [8:0] add_ln11_25_fu_799_p2;
wire   [31:0] add_ln11_9_fu_817_p2;
wire   [8:0] add_ln11_26_fu_826_p2;
wire   [8:0] add_ln11_27_fu_836_p2;
wire   [31:0] add_ln11_10_fu_854_p2;
wire   [8:0] add_ln11_28_fu_863_p2;
wire   [8:0] add_ln11_30_fu_873_p2;
wire   [8:0] add_ln11_31_fu_895_p2;
wire   [8:0] add_ln11_32_fu_905_p2;
wire   [8:0] add_ln11_33_fu_923_p2;
wire   [8:0] add_ln11_34_fu_933_p2;
wire   [8:0] add_ln11_35_fu_951_p2;
wire   [8:0] add_ln11_36_fu_961_p2;
wire   [31:0] add_ln11_5_fu_979_p2;
wire   [31:0] add_ln11_4_fu_996_p2;
wire   [31:0] add_ln11_1_fu_1017_p2;
wire   [31:0] add_ln11_2_fu_1021_p2;
wire   [31:0] add_ln11_fu_1013_p2;
wire   [31:0] add_ln11_3_fu_1026_p2;
wire   [31:0] add_ln11_15_fu_1037_p2;
wire   [31:0] add_ln11_16_fu_1041_p2;
wire   [31:0] add_ln11_17_fu_1050_p2;
wire   [31:0] add_ln11_14_fu_1046_p2;
wire   [31:0] add_ln11_18_fu_1055_p2;
wire   [31:0] add_ln11_8_fu_1032_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [23:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_done_reg = 1'b0;
end

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(x_load),
    .din1(A_load_reg_1509),
    .dout(mul_ln11_fu_753_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(x_load_3),
    .din1(A_load_3_reg_1515),
    .dout(mul_ln11_3_fu_757_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(x_load_1),
    .din1(A_load_1_reg_1546),
    .dout(mul_ln11_1_fu_781_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(x_load_12),
    .din1(A_load_12_reg_1557),
    .dout(mul_ln11_12_fu_785_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(x_load_2),
    .din1(A_load_2_reg_1588),
    .dout(mul_ln11_2_fu_809_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(x_load_4),
    .din1(A_load_4_reg_1594),
    .dout(mul_ln11_4_fu_813_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(x_load_5),
    .din1(A_load_5_reg_1635),
    .dout(mul_ln11_5_fu_846_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(x_load_6),
    .din1(A_load_6_reg_1641),
    .dout(mul_ln11_6_fu_850_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(x_load_7),
    .din1(A_load_7_reg_1682),
    .dout(mul_ln11_7_fu_883_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(x_load_8),
    .din1(A_load_8_reg_1688),
    .dout(mul_ln11_8_fu_887_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(x_load_9),
    .din1(A_load_9_reg_1729),
    .dout(mul_ln11_9_fu_915_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U12(
    .din0(x_load_10),
    .din1(A_load_10_reg_1735),
    .dout(mul_ln11_10_fu_919_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U13(
    .din0(x_load_11),
    .din1(A_load_11_reg_1776),
    .dout(mul_ln11_11_fu_943_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U14(
    .din0(x_load_13),
    .din1(A_load_13_reg_1782),
    .dout(mul_ln11_13_fu_947_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U15(
    .din0(x_load_14),
    .din1(A_load_14_reg_1818),
    .dout(mul_ln11_14_fu_971_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U16(
    .din0(x_load_15),
    .din1(A_load_15_reg_1824),
    .dout(mul_ln11_15_fu_975_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U17(
    .din0(x_load_16),
    .din1(A_load_16_reg_1860),
    .dout(mul_ln11_16_fu_988_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U18(
    .din0(x_load_17),
    .din1(A_load_17_reg_1866),
    .dout(mul_ln11_17_fu_992_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U19(
    .din0(x_load_18),
    .din1(A_load_18_reg_1897),
    .dout(mul_ln11_18_fu_1005_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U20(
    .din0(x_load_19),
    .din1(A_load_19_reg_1903),
    .dout(mul_ln11_19_fu_1009_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U21(
    .din0(A_load_reg_1509),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_fu_1067_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U22(
    .din0(A_load_1_reg_1546),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_1_fu_1071_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U23(
    .din0(A_load_2_reg_1588),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_2_fu_1085_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U24(
    .din0(A_load_3_reg_1515),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_3_fu_1089_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U25(
    .din0(A_load_4_reg_1594),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_4_fu_1103_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(A_load_5_reg_1635),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_5_fu_1107_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(A_load_6_reg_1641),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_6_fu_1121_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(A_load_7_reg_1682),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_7_fu_1125_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(A_load_8_reg_1688),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_8_fu_1139_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(A_load_9_reg_1729),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_9_fu_1143_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U31(
    .din0(A_load_10_reg_1735),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_10_fu_1157_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(A_load_11_reg_1776),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_11_fu_1161_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U33(
    .din0(A_load_12_reg_1557),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_12_fu_1175_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U34(
    .din0(A_load_13_reg_1782),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_13_fu_1179_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U35(
    .din0(A_load_14_reg_1818),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_14_fu_1193_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(A_load_15_reg_1824),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_15_fu_1197_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U37(
    .din0(A_load_16_reg_1860),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_16_fu_1211_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U38(
    .din0(A_load_17_reg_1866),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_17_fu_1215_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U39(
    .din0(A_load_18_reg_1897),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_18_fu_1229_p2)
);

atax_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U40(
    .din0(A_load_19_reg_1903),
    .din1(add_ln11_19_reg_1934),
    .dout(mul_ln13_19_fu_1233_p2)
);

atax_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln7_fu_649_p2 == 1'd0)) begin
            i_fu_164 <= add_ln7_fu_655_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_164 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_load_10_reg_1735 <= A_q0;
        A_load_9_reg_1729 <= A_q1;
        add_ln11_13_reg_1741 <= add_ln11_13_fu_891_p2;
        mul_ln11_7_reg_1719 <= mul_ln11_7_fu_883_p2;
        mul_ln11_8_reg_1724 <= mul_ln11_8_fu_887_p2;
        y_load_10_reg_1746 <= y_q1;
        y_load_11_reg_1751 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        A_load_11_reg_1776 <= A_q1;
        A_load_13_reg_1782 <= A_q0;
        mul_ln11_10_reg_1771 <= mul_ln11_10_fu_919_p2;
        mul_ln11_9_reg_1766 <= mul_ln11_9_fu_915_p2;
        y_load_12_reg_1788 <= y_q1;
        y_load_13_reg_1793 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_load_12_reg_1557 <= A_q0;
        A_load_1_reg_1546 <= A_q1;
        mul_ln11_3_reg_1552 <= mul_ln11_3_fu_757_p2;
        mul_ln11_reg_1541 <= mul_ln11_fu_753_p2;
        y_load_2_reg_1563 <= y_q1;
        y_load_3_reg_1568 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        A_load_14_reg_1818 <= A_q1;
        A_load_15_reg_1824 <= A_q0;
        mul_ln11_11_reg_1808 <= mul_ln11_11_fu_943_p2;
        mul_ln11_13_reg_1813 <= mul_ln11_13_fu_947_p2;
        y_load_14_reg_1830 <= y_q1;
        y_load_15_reg_1835 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_load_16_reg_1860 <= A_q1;
        A_load_17_reg_1866 <= A_q0;
        add_ln11_6_reg_1872 <= add_ln11_6_fu_983_p2;
        mul_ln11_14_reg_1850 <= mul_ln11_14_fu_971_p2;
        mul_ln11_15_reg_1855 <= mul_ln11_15_fu_975_p2;
        y_load_16_reg_1877 <= y_q1;
        y_load_17_reg_1882 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        A_load_18_reg_1897 <= A_q1;
        A_load_19_reg_1903 <= A_q0;
        add_ln11_7_reg_1909 <= add_ln11_7_fu_1000_p2;
        mul_ln11_16_reg_1887 <= mul_ln11_16_fu_988_p2;
        mul_ln11_17_reg_1892 <= mul_ln11_17_fu_992_p2;
        y_load_18_reg_1914 <= y_q1;
        y_load_19_reg_1919 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_load_2_reg_1588 <= A_q1;
        A_load_4_reg_1594 <= A_q0;
        mul_ln11_12_reg_1600 <= mul_ln11_12_fu_785_p2;
        mul_ln11_1_reg_1583 <= mul_ln11_1_fu_781_p2;
        y_load_4_reg_1605 <= y_q1;
        y_load_5_reg_1610 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_load_3_reg_1515 <= A_q0;
        A_load_reg_1509 <= A_q1;
        t_reg_1504 <= tmp_q0;
        y_load_1_reg_1526 <= y_q0;
        y_load_reg_1521 <= y_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_load_5_reg_1635 <= A_q1;
        A_load_6_reg_1641 <= A_q0;
        add_ln11_11_reg_1647 <= add_ln11_11_fu_821_p2;
        mul_ln11_2_reg_1625 <= mul_ln11_2_fu_809_p2;
        mul_ln11_4_reg_1630 <= mul_ln11_4_fu_813_p2;
        y_load_6_reg_1652 <= y_q1;
        y_load_7_reg_1657 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_load_7_reg_1682 <= A_q1;
        A_load_8_reg_1688 <= A_q0;
        add_ln11_12_reg_1694 <= add_ln11_12_fu_858_p2;
        mul_ln11_5_reg_1672 <= mul_ln11_5_fu_846_p2;
        mul_ln11_6_reg_1677 <= mul_ln11_6_fu_850_p2;
        y_load_8_reg_1699 <= y_q1;
        y_load_9_reg_1704 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln11_19_reg_1934 <= add_ln11_19_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln11_20_reg_1457[8 : 2] <= add_ln11_20_fu_686_p2[8 : 2];
        tmp_addr_reg_1489 <= i_cast_fu_661_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln11_18_reg_1924 <= mul_ln11_18_fu_1005_p2;
        mul_ln11_19_reg_1929 <= mul_ln11_19_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mul_ln13_10_reg_2009 <= mul_ln13_10_fu_1157_p2;
        mul_ln13_11_reg_2014 <= mul_ln13_11_fu_1161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mul_ln13_12_reg_2019 <= mul_ln13_12_fu_1175_p2;
        mul_ln13_13_reg_2024 <= mul_ln13_13_fu_1179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        mul_ln13_14_reg_2029 <= mul_ln13_14_fu_1193_p2;
        mul_ln13_15_reg_2034 <= mul_ln13_15_fu_1197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        mul_ln13_16_reg_2039 <= mul_ln13_16_fu_1211_p2;
        mul_ln13_17_reg_2044 <= mul_ln13_17_fu_1215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mul_ln13_18_reg_2049 <= mul_ln13_18_fu_1229_p2;
        mul_ln13_19_reg_2054 <= mul_ln13_19_fu_1233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln13_1_reg_1964 <= mul_ln13_1_fu_1071_p2;
        mul_ln13_reg_1959 <= mul_ln13_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_ln13_2_reg_1969 <= mul_ln13_2_fu_1085_p2;
        mul_ln13_3_reg_1974 <= mul_ln13_3_fu_1089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mul_ln13_4_reg_1979 <= mul_ln13_4_fu_1103_p2;
        mul_ln13_5_reg_1984 <= mul_ln13_5_fu_1107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        mul_ln13_6_reg_1989 <= mul_ln13_6_fu_1121_p2;
        mul_ln13_7_reg_1994 <= mul_ln13_7_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mul_ln13_8_reg_1999 <= mul_ln13_8_fu_1139_p2;
        mul_ln13_9_reg_2004 <= mul_ln13_9_fu_1143_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = zext_ln11_20_fu_966_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = zext_ln11_18_fu_938_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = zext_ln11_16_fu_910_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = zext_ln11_14_fu_878_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = zext_ln11_11_fu_841_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = zext_ln11_9_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = zext_ln11_7_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = zext_ln11_5_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln11_13_fu_728_p1;
    end else if (((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_address0 = zext_ln11_4_fu_703_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address1 = zext_ln11_19_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address1 = zext_ln11_17_fu_928_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address1 = zext_ln11_15_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address1 = zext_ln11_12_fu_868_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address1 = zext_ln11_10_fu_831_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address1 = zext_ln11_8_fu_794_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = zext_ln11_6_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = zext_ln11_3_fu_738_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address1 = zext_ln11_2_fu_718_p1;
    end else if (((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        A_address1 = zext_ln11_1_fu_692_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln7_fu_649_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_164;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_address0 = tmp_addr_reg_1489;
    end else if (((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_address0 = i_cast_fu_661_p1;
    end else begin
        tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        tmp_ce0 = 1'b1;
    end else begin
        tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_we0 = 1'b1;
    end else begin
        tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        y_address0 = y_addr_18_reg_1444;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        y_address0 = 64'd19;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state9))) begin
        y_address0 = 64'd17;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        y_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7))) begin
        y_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state6))) begin
        y_address0 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5))) begin
        y_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state4))) begin
        y_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state3))) begin
        y_address0 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        y_address0 = 64'd3;
    end else if (((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        y_address0 = 64'd1;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        y_address1 = y_addr_19_reg_1449;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        y_address1 = 64'd18;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state9))) begin
        y_address1 = 64'd16;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        y_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7))) begin
        y_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state6))) begin
        y_address1 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5))) begin
        y_address1 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state4))) begin
        y_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state3))) begin
        y_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        y_address1 = 64'd2;
    end else if (((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        y_address1 = 64'd0;
    end else begin
        y_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln7_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        y_ce1 = 1'b1;
    end else begin
        y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        y_d0 = add_ln13_19_fu_1242_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        y_d0 = add_ln13_17_fu_1224_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        y_d0 = add_ln13_15_fu_1206_p2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        y_d0 = add_ln13_13_fu_1188_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        y_d0 = add_ln13_11_fu_1170_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        y_d0 = add_ln13_9_fu_1152_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        y_d0 = add_ln13_7_fu_1134_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        y_d0 = add_ln13_5_fu_1116_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        y_d0 = add_ln13_3_fu_1098_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        y_d0 = add_ln13_1_fu_1080_p2;
    end else begin
        y_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        y_d1 = add_ln13_18_fu_1237_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        y_d1 = add_ln13_16_fu_1219_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        y_d1 = add_ln13_14_fu_1201_p2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        y_d1 = add_ln13_12_fu_1183_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        y_d1 = add_ln13_10_fu_1165_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        y_d1 = add_ln13_8_fu_1147_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        y_d1 = add_ln13_6_fu_1129_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        y_d1 = add_ln13_4_fu_1111_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        y_d1 = add_ln13_2_fu_1093_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        y_d1 = add_ln13_fu_1075_p2;
    end else begin
        y_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        y_we1 = 1'b1;
    end else begin
        y_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln7_fu_649_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_10_fu_854_p2 = (mul_ln11_1_reg_1583 + mul_ln11_2_reg_1625);

assign add_ln11_11_fu_821_p2 = (add_ln11_9_fu_817_p2 + mul_ln11_12_reg_1600);

assign add_ln11_12_fu_858_p2 = (add_ln11_11_reg_1647 + add_ln11_10_fu_854_p2);

assign add_ln11_13_fu_891_p2 = (mul_ln11_5_reg_1672 + mul_ln11_6_reg_1677);

assign add_ln11_14_fu_1046_p2 = (add_ln11_13_reg_1741 + mul_ln11_4_reg_1630);

assign add_ln11_15_fu_1037_p2 = (mul_ln11_8_reg_1724 + mul_ln11_19_reg_1929);

assign add_ln11_16_fu_1041_p2 = (add_ln11_15_fu_1037_p2 + mul_ln11_7_reg_1719);

assign add_ln11_17_fu_1050_p2 = (add_ln11_12_reg_1694 + add_ln11_16_fu_1041_p2);

assign add_ln11_18_fu_1055_p2 = (add_ln11_17_fu_1050_p2 + add_ln11_14_fu_1046_p2);

assign add_ln11_19_fu_1061_p2 = (add_ln11_18_fu_1055_p2 + add_ln11_8_fu_1032_p2);

assign add_ln11_1_fu_1017_p2 = (mul_ln11_16_reg_1887 + mul_ln11_15_reg_1855);

assign add_ln11_20_fu_686_p2 = (tmp_1_fu_666_p3 + zext_ln11_fu_682_p1);

assign add_ln11_21_fu_743_p2 = (add_ln11_20_reg_1457 + 9'd4);

assign add_ln11_22_fu_761_p2 = (add_ln11_20_reg_1457 + 9'd5);

assign add_ln11_23_fu_771_p2 = (add_ln11_20_reg_1457 + 9'd6);

assign add_ln11_24_fu_789_p2 = (add_ln11_20_reg_1457 + 9'd7);

assign add_ln11_25_fu_799_p2 = (add_ln11_20_reg_1457 + 9'd8);

assign add_ln11_26_fu_826_p2 = (add_ln11_20_reg_1457 + 9'd9);

assign add_ln11_27_fu_836_p2 = (add_ln11_20_reg_1457 + 9'd10);

assign add_ln11_28_fu_863_p2 = (add_ln11_20_reg_1457 + 9'd11);

assign add_ln11_29_fu_723_p2 = (add_ln11_20_reg_1457 + 9'd12);

assign add_ln11_2_fu_1021_p2 = (add_ln11_1_fu_1017_p2 + mul_ln11_18_reg_1924);

assign add_ln11_30_fu_873_p2 = (add_ln11_20_reg_1457 + 9'd13);

assign add_ln11_31_fu_895_p2 = (add_ln11_20_reg_1457 + 9'd14);

assign add_ln11_32_fu_905_p2 = (add_ln11_20_reg_1457 + 9'd15);

assign add_ln11_33_fu_923_p2 = (add_ln11_20_reg_1457 + 9'd16);

assign add_ln11_34_fu_933_p2 = (add_ln11_20_reg_1457 + 9'd17);

assign add_ln11_35_fu_951_p2 = (add_ln11_20_reg_1457 + 9'd18);

assign add_ln11_36_fu_961_p2 = (add_ln11_20_reg_1457 + 9'd19);

assign add_ln11_3_fu_1026_p2 = (add_ln11_2_fu_1021_p2 + add_ln11_fu_1013_p2);

assign add_ln11_4_fu_996_p2 = (mul_ln11_14_reg_1850 + mul_ln11_10_reg_1771);

assign add_ln11_5_fu_979_p2 = (mul_ln11_11_reg_1808 + mul_ln11_13_reg_1813);

assign add_ln11_6_fu_983_p2 = (add_ln11_5_fu_979_p2 + mul_ln11_9_reg_1766);

assign add_ln11_7_fu_1000_p2 = (add_ln11_6_reg_1872 + add_ln11_4_fu_996_p2);

assign add_ln11_8_fu_1032_p2 = (add_ln11_7_reg_1909 + add_ln11_3_fu_1026_p2);

assign add_ln11_9_fu_817_p2 = (mul_ln11_3_reg_1552 + mul_ln11_reg_1541);

assign add_ln11_fu_1013_p2 = (t_reg_1504 + mul_ln11_17_reg_1892);

assign add_ln13_10_fu_1165_p2 = (y_load_10_reg_1746 + mul_ln13_10_reg_2009);

assign add_ln13_11_fu_1170_p2 = (y_load_11_reg_1751 + mul_ln13_11_reg_2014);

assign add_ln13_12_fu_1183_p2 = (y_load_12_reg_1788 + mul_ln13_12_reg_2019);

assign add_ln13_13_fu_1188_p2 = (y_load_13_reg_1793 + mul_ln13_13_reg_2024);

assign add_ln13_14_fu_1201_p2 = (y_load_14_reg_1830 + mul_ln13_14_reg_2029);

assign add_ln13_15_fu_1206_p2 = (y_load_15_reg_1835 + mul_ln13_15_reg_2034);

assign add_ln13_16_fu_1219_p2 = (y_load_16_reg_1877 + mul_ln13_16_reg_2039);

assign add_ln13_17_fu_1224_p2 = (y_load_17_reg_1882 + mul_ln13_17_reg_2044);

assign add_ln13_18_fu_1237_p2 = (y_load_18_reg_1914 + mul_ln13_18_reg_2049);

assign add_ln13_19_fu_1242_p2 = (y_load_19_reg_1919 + mul_ln13_19_reg_2054);

assign add_ln13_1_fu_1080_p2 = (y_load_1_reg_1526 + mul_ln13_1_reg_1964);

assign add_ln13_2_fu_1093_p2 = (y_load_2_reg_1563 + mul_ln13_2_reg_1969);

assign add_ln13_3_fu_1098_p2 = (y_load_3_reg_1568 + mul_ln13_3_reg_1974);

assign add_ln13_4_fu_1111_p2 = (y_load_4_reg_1605 + mul_ln13_4_reg_1979);

assign add_ln13_5_fu_1116_p2 = (y_load_5_reg_1610 + mul_ln13_5_reg_1984);

assign add_ln13_6_fu_1129_p2 = (y_load_6_reg_1652 + mul_ln13_6_reg_1989);

assign add_ln13_7_fu_1134_p2 = (y_load_7_reg_1657 + mul_ln13_7_reg_1994);

assign add_ln13_8_fu_1147_p2 = (y_load_8_reg_1699 + mul_ln13_8_reg_1999);

assign add_ln13_9_fu_1152_p2 = (y_load_9_reg_1704 + mul_ln13_9_reg_2004);

assign add_ln13_fu_1075_p2 = (y_load_reg_1521 + mul_ln13_reg_1959);

assign add_ln7_fu_655_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast_fu_661_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln7_fu_649_p2 = ((ap_sig_allocacmp_i_1 == 5'd20) ? 1'b1 : 1'b0);

assign or_ln11_1_fu_733_p2 = (9'd2 | add_ln11_20_reg_1457);

assign or_ln11_2_fu_697_p2 = (9'd3 | add_ln11_20_fu_686_p2);

assign or_ln11_fu_713_p2 = (9'd1 | add_ln11_20_reg_1457);

assign tmp_1_fu_666_p3 = {{ap_sig_allocacmp_i_1}, {4'd0}};

assign tmp_2_fu_674_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign tmp_d0 = add_ln11_19_reg_1934;

assign y_addr_18_reg_1444 = 64'd1;

assign y_addr_19_reg_1449 = 64'd0;

assign zext_ln11_10_fu_831_p1 = add_ln11_26_fu_826_p2;

assign zext_ln11_11_fu_841_p1 = add_ln11_27_fu_836_p2;

assign zext_ln11_12_fu_868_p1 = add_ln11_28_fu_863_p2;

assign zext_ln11_13_fu_728_p1 = add_ln11_29_fu_723_p2;

assign zext_ln11_14_fu_878_p1 = add_ln11_30_fu_873_p2;

assign zext_ln11_15_fu_900_p1 = add_ln11_31_fu_895_p2;

assign zext_ln11_16_fu_910_p1 = add_ln11_32_fu_905_p2;

assign zext_ln11_17_fu_928_p1 = add_ln11_33_fu_923_p2;

assign zext_ln11_18_fu_938_p1 = add_ln11_34_fu_933_p2;

assign zext_ln11_19_fu_956_p1 = add_ln11_35_fu_951_p2;

assign zext_ln11_1_fu_692_p1 = add_ln11_20_fu_686_p2;

assign zext_ln11_20_fu_966_p1 = add_ln11_36_fu_961_p2;

assign zext_ln11_2_fu_718_p1 = or_ln11_fu_713_p2;

assign zext_ln11_3_fu_738_p1 = or_ln11_1_fu_733_p2;

assign zext_ln11_4_fu_703_p1 = or_ln11_2_fu_697_p2;

assign zext_ln11_5_fu_748_p1 = add_ln11_21_fu_743_p2;

assign zext_ln11_6_fu_766_p1 = add_ln11_22_fu_761_p2;

assign zext_ln11_7_fu_776_p1 = add_ln11_23_fu_771_p2;

assign zext_ln11_8_fu_794_p1 = add_ln11_24_fu_789_p2;

assign zext_ln11_9_fu_804_p1 = add_ln11_25_fu_799_p2;

assign zext_ln11_fu_682_p1 = tmp_2_fu_674_p3;

always @ (posedge ap_clk) begin
    add_ln11_20_reg_1457[1:0] <= 2'b00;
end

endmodule //atax_atax_Pipeline_VITIS_LOOP_7_1
