// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stencil_2d_stencil_2d_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        orig_address0,
        orig_ce0,
        orig_q0,
        orig_address1,
        orig_ce1,
        orig_q1,
        filter_load,
        filter_load_1,
        filter_load_2,
        filter_load_3,
        filter_load_4,
        filter_load_5,
        filter_load_6,
        filter_load_7,
        filter_load_8,
        sol_address0,
        sol_ce0,
        sol_we0,
        sol_d0,
        add21_lcssa_lcssa_phi_out,
        add21_lcssa_lcssa_phi_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] orig_address0;
output   orig_ce0;
input  [31:0] orig_q0;
output  [9:0] orig_address1;
output   orig_ce1;
input  [31:0] orig_q1;
input  [31:0] filter_load;
input  [31:0] filter_load_1;
input  [31:0] filter_load_2;
input  [31:0] filter_load_3;
input  [31:0] filter_load_4;
input  [31:0] filter_load_5;
input  [31:0] filter_load_6;
input  [31:0] filter_load_7;
input  [31:0] filter_load_8;
output  [9:0] sol_address0;
output   sol_ce0;
output   sol_we0;
output  [31:0] sol_d0;
output  [31:0] add21_lcssa_lcssa_phi_out;
output   add21_lcssa_lcssa_phi_out_ap_vld;

reg ap_idle;
reg[9:0] orig_address0;
reg orig_ce0;
reg[9:0] orig_address1;
reg orig_ce1;
reg sol_ce0;
reg sol_we0;
reg add21_lcssa_lcssa_phi_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state10_pp0_stage4_iter1;
wire    ap_block_state15_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_subdone;
reg   [0:0] icmp_ln7_reg_729;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] r_1_reg_702;
wire   [9:0] empty_fu_292_p2;
reg   [9:0] empty_reg_707;
wire   [4:0] empty_6_fu_298_p2;
reg   [4:0] empty_6_reg_712;
wire   [9:0] empty_7_fu_324_p2;
reg   [9:0] empty_7_reg_717;
wire   [4:0] empty_8_fu_330_p2;
reg   [4:0] empty_8_reg_723;
wire   [0:0] icmp_ln7_fu_336_p2;
reg   [0:0] icmp_ln7_reg_729_pp0_iter1_reg;
reg   [4:0] c_load_reg_733;
wire   [0:0] icmp_ln8_fu_351_p2;
reg   [0:0] icmp_ln8_reg_738;
wire   [4:0] p_mid110_fu_357_p2;
reg   [4:0] p_mid110_reg_747;
wire   [9:0] add_ln12_fu_449_p2;
reg   [9:0] add_ln12_reg_753;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [9:0] add_ln12_2_fu_455_p2;
reg   [9:0] add_ln12_2_reg_759;
wire   [9:0] add_ln12_3_fu_461_p2;
reg   [9:0] add_ln12_3_reg_764;
wire   [9:0] add_ln12_6_fu_467_p2;
reg   [9:0] add_ln12_6_reg_771;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state13_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] add_ln12_8_fu_497_p2;
reg   [9:0] add_ln12_8_reg_788;
wire   [63:0] zext_ln12_4_fu_502_p1;
reg   [63:0] zext_ln12_4_reg_793;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [63:0] zext_ln12_4_reg_793_pp0_iter1_reg;
reg   [63:0] zext_ln12_4_reg_793_pp0_iter2_reg;
wire   [9:0] add_ln12_1_fu_506_p2;
reg   [9:0] add_ln12_1_reg_803;
reg  signed [31:0] orig_load_2_reg_808;
reg  signed [31:0] orig_load_3_reg_813;
wire   [9:0] add_ln12_4_fu_511_p2;
reg   [9:0] add_ln12_4_reg_818;
reg  signed [31:0] orig_load_reg_828;
wire    ap_block_pp0_stage4_11001;
wire   [9:0] add_ln12_5_fu_536_p2;
reg   [9:0] add_ln12_5_reg_843;
reg  signed [31:0] orig_load_8_reg_848;
reg  signed [31:0] orig_load_1_reg_853;
reg  signed [31:0] orig_load_4_reg_858;
wire   [9:0] add_ln12_7_fu_553_p2;
reg   [9:0] add_ln12_7_reg_873;
reg  signed [31:0] orig_load_5_reg_878;
reg  signed [31:0] orig_load_6_reg_883;
reg  signed [31:0] orig_load_7_reg_893;
wire   [31:0] grp_fu_524_p2;
reg   [31:0] mul_ln12_2_reg_898;
wire   [31:0] grp_fu_528_p2;
reg   [31:0] mul_ln12_3_reg_903;
wire   [31:0] grp_fu_541_p2;
reg   [31:0] mul_ln12_reg_908;
wire   [31:0] grp_fu_558_p2;
reg   [31:0] mul_ln12_8_reg_913;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] mul_ln12_1_reg_918;
wire   [31:0] grp_fu_566_p2;
reg   [31:0] mul_ln12_4_reg_923;
wire   [31:0] add_ln13_5_fu_590_p2;
reg   [31:0] add_ln13_5_reg_928;
wire   [31:0] grp_fu_574_p2;
reg   [31:0] mul_ln12_5_reg_933;
wire   [31:0] grp_fu_578_p2;
reg   [31:0] mul_ln12_6_reg_938;
wire   [31:0] add_ln13_6_fu_599_p2;
reg   [31:0] add_ln13_6_reg_943;
wire   [31:0] grp_fu_582_p2;
reg   [31:0] mul_ln12_7_reg_948;
wire   [31:0] add_ln13_1_fu_604_p2;
reg   [31:0] add_ln13_1_reg_953;
wire   [31:0] add_ln13_fu_608_p2;
reg   [31:0] add_ln13_reg_958;
wire   [31:0] add_ln13_7_fu_616_p2;
reg   [31:0] add_ln13_7_reg_963;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln12_6_fu_489_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln12_7_fu_493_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln12_2_fu_516_p1;
wire   [63:0] zext_ln12_5_fu_520_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln12_8_fu_532_p1;
wire   [63:0] zext_ln12_9_fu_545_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln12_fu_549_p1;
wire   [63:0] zext_ln12_1_fu_570_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] add21_lcssa_lcssa_phi_fu_80;
reg   [4:0] c_fu_84;
wire   [4:0] add_ln8_fu_473_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_c_load;
reg   [4:0] r_fu_88;
wire   [4:0] select_ln7_4_fu_440_p3;
reg   [4:0] ap_sig_allocacmp_r_1;
reg   [9:0] indvar_flatten_fu_92;
wire   [9:0] add_ln7_fu_342_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage0_01001;
wire   [5:0] p_shl1_fu_280_p3;
wire   [9:0] p_shl_fu_272_p3;
wire   [9:0] p_shl1_cast_fu_288_p1;
wire   [5:0] p_shl3_1_fu_312_p3;
wire   [9:0] p_shl2_1_fu_304_p3;
wire   [9:0] p_shl3_1_cast_fu_320_p1;
wire   [5:0] p_shl3_2_fu_375_p3;
wire   [9:0] p_shl2_2_fu_368_p3;
wire   [9:0] p_shl3_2_cast_fu_382_p1;
wire   [9:0] empty_9_fu_386_p2;
wire   [5:0] p_shl3_2_mid1_fu_416_p3;
wire   [9:0] p_shl2_2_mid1_fu_409_p3;
wire   [9:0] p_shl3_2_cast_mid1_fu_423_p1;
wire   [9:0] p_mid112_fu_427_p2;
wire   [4:0] select_ln7_fu_392_p3;
wire   [9:0] select_ln7_1_fu_398_p3;
wire   [9:0] zext_ln12_3_fu_445_p1;
wire   [9:0] select_ln7_2_fu_403_p3;
wire   [9:0] select_ln7_3_fu_433_p3;
wire   [31:0] add_ln13_4_fu_586_p2;
wire   [31:0] add_ln13_3_fu_595_p2;
wire   [31:0] add_ln13_2_fu_612_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_2_reg_808),
    .din1(filter_load_2),
    .ce(1'b1),
    .dout(grp_fu_524_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_3_reg_813),
    .din1(filter_load_3),
    .ce(1'b1),
    .dout(grp_fu_528_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_reg_828),
    .din1(filter_load),
    .ce(1'b1),
    .dout(grp_fu_541_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_8_reg_848),
    .din1(filter_load_8),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_1_reg_853),
    .din1(filter_load_1),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_4_reg_858),
    .din1(filter_load_4),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_5_reg_878),
    .din1(filter_load_5),
    .ce(1'b1),
    .dout(grp_fu_574_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_6_reg_883),
    .din1(filter_load_6),
    .ce(1'b1),
    .dout(grp_fu_578_p2)
);

stencil_2d_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(orig_load_7_reg_893),
    .din1(filter_load_7),
    .ce(1'b1),
    .dout(grp_fu_582_p2)
);

stencil_2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_fu_84 <= 5'd0;
    end else if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_fu_84 <= add_ln8_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_336_p2 == 1'd0))) begin
            indvar_flatten_fu_92 <= add_ln7_fu_342_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_92 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_fu_88 <= 5'd0;
    end else if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_fu_88 <= select_ln7_4_fu_440_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add21_lcssa_lcssa_phi_fu_80 <= add_ln13_7_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln12_1_reg_803 <= add_ln12_1_fu_506_p2;
        add_ln12_4_reg_818 <= add_ln12_4_fu_511_p2;
        zext_ln12_4_reg_793[9 : 0] <= zext_ln12_4_fu_502_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln12_2_reg_759 <= add_ln12_2_fu_455_p2;
        add_ln12_3_reg_764 <= add_ln12_3_fu_461_p2;
        add_ln12_6_reg_771 <= add_ln12_6_fu_467_p2;
        add_ln12_reg_753 <= add_ln12_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln12_5_reg_843 <= add_ln12_5_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln12_7_reg_873 <= add_ln12_7_fu_553_p2;
        add_ln13_5_reg_928 <= add_ln13_5_fu_590_p2;
        empty_6_reg_712 <= empty_6_fu_298_p2;
        empty_7_reg_717[9 : 1] <= empty_7_fu_324_p2[9 : 1];
        empty_8_reg_723 <= empty_8_fu_330_p2;
        empty_reg_707[9 : 1] <= empty_fu_292_p2[9 : 1];
        icmp_ln7_reg_729 <= icmp_ln7_fu_336_p2;
        icmp_ln7_reg_729_pp0_iter1_reg <= icmp_ln7_reg_729;
        mul_ln12_1_reg_918 <= grp_fu_562_p2;
        mul_ln12_4_reg_923 <= grp_fu_566_p2;
        r_1_reg_702 <= ap_sig_allocacmp_r_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln12_8_reg_788 <= add_ln12_8_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln13_1_reg_953 <= add_ln13_1_fu_604_p2;
        mul_ln12_7_reg_948 <= grp_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln13_6_reg_943 <= add_ln13_6_fu_599_p2;
        mul_ln12_5_reg_933 <= grp_fu_574_p2;
        mul_ln12_6_reg_938 <= grp_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln13_7_reg_963 <= add_ln13_7_fu_616_p2;
        mul_ln12_8_reg_913 <= grp_fu_558_p2;
        mul_ln12_reg_908 <= grp_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln13_reg_958 <= add_ln13_fu_608_p2;
        mul_ln12_2_reg_898 <= grp_fu_524_p2;
        mul_ln12_3_reg_903 <= grp_fu_528_p2;
        zext_ln12_4_reg_793_pp0_iter1_reg[9 : 0] <= zext_ln12_4_reg_793[9 : 0];
        zext_ln12_4_reg_793_pp0_iter2_reg[9 : 0] <= zext_ln12_4_reg_793_pp0_iter1_reg[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_fu_336_p2 == 1'd0))) begin
        c_load_reg_733 <= ap_sig_allocacmp_c_load;
        icmp_ln8_reg_738 <= icmp_ln8_fu_351_p2;
        p_mid110_reg_747 <= p_mid110_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_load_1_reg_853 <= orig_q0;
        orig_load_4_reg_858 <= orig_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        orig_load_2_reg_808 <= orig_q0;
        orig_load_3_reg_813 <= orig_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_load_5_reg_878 <= orig_q1;
        orig_load_6_reg_883 <= orig_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        orig_load_7_reg_893 <= orig_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        orig_load_8_reg_848 <= orig_q1;
        orig_load_reg_828 <= orig_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_reg_729_pp0_iter1_reg == 1'd1))) begin
        add21_lcssa_lcssa_phi_out_ap_vld = 1'b1;
    end else begin
        add21_lcssa_lcssa_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_reg_729 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_reg_729_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c_load = 5'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_r_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_r_1 = r_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        orig_address0 = zext_ln12_1_fu_570_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_address0 = zext_ln12_fu_549_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        orig_address0 = zext_ln12_5_fu_520_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        orig_address0 = zext_ln12_4_fu_502_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        orig_address0 = zext_ln12_6_fu_489_p1;
    end else begin
        orig_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        orig_address1 = zext_ln12_9_fu_545_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        orig_address1 = zext_ln12_8_fu_532_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        orig_address1 = zext_ln12_2_fu_516_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        orig_address1 = zext_ln12_7_fu_493_p1;
    end else begin
        orig_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        orig_ce0 = 1'b1;
    end else begin
        orig_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        orig_ce1 = 1'b1;
    end else begin
        orig_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sol_ce0 = 1'b1;
    end else begin
        sol_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sol_we0 = 1'b1;
    end else begin
        sol_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add21_lcssa_lcssa_phi_out = add21_lcssa_lcssa_phi_fu_80;

assign add_ln12_1_fu_506_p2 = (add_ln12_reg_753 + 10'd1);

assign add_ln12_2_fu_455_p2 = (add_ln12_fu_449_p2 + 10'd2);

assign add_ln12_3_fu_461_p2 = (select_ln7_2_fu_403_p3 + zext_ln12_3_fu_445_p1);

assign add_ln12_4_fu_511_p2 = (add_ln12_3_reg_764 + 10'd1);

assign add_ln12_5_fu_536_p2 = (add_ln12_3_reg_764 + 10'd2);

assign add_ln12_6_fu_467_p2 = (select_ln7_3_fu_433_p3 + zext_ln12_3_fu_445_p1);

assign add_ln12_7_fu_553_p2 = (add_ln12_6_reg_771 + 10'd1);

assign add_ln12_8_fu_497_p2 = (add_ln12_6_reg_771 + 10'd2);

assign add_ln12_fu_449_p2 = (select_ln7_1_fu_398_p3 + zext_ln12_3_fu_445_p1);

assign add_ln13_1_fu_604_p2 = (mul_ln12_5_reg_933 + mul_ln12_4_reg_923);

assign add_ln13_2_fu_612_p2 = (add_ln13_1_reg_953 + add_ln13_reg_958);

assign add_ln13_3_fu_595_p2 = (mul_ln12_reg_908 + mul_ln12_1_reg_918);

assign add_ln13_4_fu_586_p2 = (mul_ln12_2_reg_898 + mul_ln12_8_reg_913);

assign add_ln13_5_fu_590_p2 = (add_ln13_4_fu_586_p2 + mul_ln12_3_reg_903);

assign add_ln13_6_fu_599_p2 = (add_ln13_5_reg_928 + add_ln13_3_fu_595_p2);

assign add_ln13_7_fu_616_p2 = (add_ln13_6_reg_943 + add_ln13_2_fu_612_p2);

assign add_ln13_fu_608_p2 = (mul_ln12_6_reg_938 + mul_ln12_7_reg_948);

assign add_ln7_fu_342_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln8_fu_473_p2 = (select_ln7_fu_392_p3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

assign empty_6_fu_298_p2 = (ap_sig_allocacmp_r_1 + 5'd1);

assign empty_7_fu_324_p2 = (p_shl2_1_fu_304_p3 - p_shl3_1_cast_fu_320_p1);

assign empty_8_fu_330_p2 = (ap_sig_allocacmp_r_1 + 5'd2);

assign empty_9_fu_386_p2 = (p_shl2_2_fu_368_p3 - p_shl3_2_cast_fu_382_p1);

assign empty_fu_292_p2 = (p_shl_fu_272_p3 - p_shl1_cast_fu_288_p1);

assign icmp_ln7_fu_336_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_351_p2 = ((ap_sig_allocacmp_c_load == 5'd28) ? 1'b1 : 1'b0);

assign p_mid110_fu_357_p2 = (ap_sig_allocacmp_r_1 + 5'd3);

assign p_mid112_fu_427_p2 = (p_shl2_2_mid1_fu_409_p3 - p_shl3_2_cast_mid1_fu_423_p1);

assign p_shl1_cast_fu_288_p1 = p_shl1_fu_280_p3;

assign p_shl1_fu_280_p3 = {{ap_sig_allocacmp_r_1}, {1'd0}};

assign p_shl2_1_fu_304_p3 = {{empty_6_fu_298_p2}, {5'd0}};

assign p_shl2_2_fu_368_p3 = {{empty_8_reg_723}, {5'd0}};

assign p_shl2_2_mid1_fu_409_p3 = {{p_mid110_reg_747}, {5'd0}};

assign p_shl3_1_cast_fu_320_p1 = p_shl3_1_fu_312_p3;

assign p_shl3_1_fu_312_p3 = {{empty_6_fu_298_p2}, {1'd0}};

assign p_shl3_2_cast_fu_382_p1 = p_shl3_2_fu_375_p3;

assign p_shl3_2_cast_mid1_fu_423_p1 = p_shl3_2_mid1_fu_416_p3;

assign p_shl3_2_fu_375_p3 = {{empty_8_reg_723}, {1'd0}};

assign p_shl3_2_mid1_fu_416_p3 = {{p_mid110_reg_747}, {1'd0}};

assign p_shl_fu_272_p3 = {{ap_sig_allocacmp_r_1}, {5'd0}};

assign select_ln7_1_fu_398_p3 = ((icmp_ln8_reg_738[0:0] == 1'b1) ? empty_7_reg_717 : empty_reg_707);

assign select_ln7_2_fu_403_p3 = ((icmp_ln8_reg_738[0:0] == 1'b1) ? empty_9_fu_386_p2 : empty_7_reg_717);

assign select_ln7_3_fu_433_p3 = ((icmp_ln8_reg_738[0:0] == 1'b1) ? p_mid112_fu_427_p2 : empty_9_fu_386_p2);

assign select_ln7_4_fu_440_p3 = ((icmp_ln8_reg_738[0:0] == 1'b1) ? empty_6_reg_712 : r_1_reg_702);

assign select_ln7_fu_392_p3 = ((icmp_ln8_reg_738[0:0] == 1'b1) ? 5'd0 : c_load_reg_733);

assign sol_address0 = zext_ln12_4_reg_793_pp0_iter2_reg;

assign sol_d0 = add_ln13_7_reg_963;

assign zext_ln12_1_fu_570_p1 = add_ln12_7_reg_873;

assign zext_ln12_2_fu_516_p1 = add_ln12_8_reg_788;

assign zext_ln12_3_fu_445_p1 = select_ln7_fu_392_p3;

assign zext_ln12_4_fu_502_p1 = add_ln12_reg_753;

assign zext_ln12_5_fu_520_p1 = add_ln12_1_reg_803;

assign zext_ln12_6_fu_489_p1 = add_ln12_2_reg_759;

assign zext_ln12_7_fu_493_p1 = add_ln12_3_reg_764;

assign zext_ln12_8_fu_532_p1 = add_ln12_4_reg_818;

assign zext_ln12_9_fu_545_p1 = add_ln12_5_reg_843;

assign zext_ln12_fu_549_p1 = add_ln12_6_reg_771;

always @ (posedge ap_clk) begin
    empty_reg_707[0] <= 1'b0;
    empty_7_reg_717[0] <= 1'b0;
    zext_ln12_4_reg_793[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln12_4_reg_793_pp0_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln12_4_reg_793_pp0_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //stencil_2d_stencil_2d_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2
