-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil_2d_stencil_2d_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    orig_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    orig_ce0 : OUT STD_LOGIC;
    orig_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    orig_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    orig_ce1 : OUT STD_LOGIC;
    orig_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    sol_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sol_ce0 : OUT STD_LOGIC;
    sol_we0 : OUT STD_LOGIC;
    sol_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    add21_lcssa_lcssa_phi_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add21_lcssa_lcssa_phi_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of stencil_2d_stencil_2d_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln7_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_1_reg_702 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_292_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_707 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_6_fu_298_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_6_reg_712 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_7_fu_324_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_7_reg_717 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_8_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_8_reg_723 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_load_reg_733 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid110_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid110_reg_747 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_fu_449_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_reg_753 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln12_2_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_2_reg_759 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_3_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_3_reg_764 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_6_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_6_reg_771 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln12_8_fu_497_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_8_reg_788 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln12_4_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_4_reg_793 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal zext_ln12_4_reg_793_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_4_reg_793_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln12_1_fu_506_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_1_reg_803 : STD_LOGIC_VECTOR (9 downto 0);
    signal orig_load_2_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_load_3_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_4_fu_511_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_4_reg_818 : STD_LOGIC_VECTOR (9 downto 0);
    signal orig_load_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln12_5_fu_536_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_5_reg_843 : STD_LOGIC_VECTOR (9 downto 0);
    signal orig_load_8_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_load_1_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_load_4_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_7_fu_553_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_7_reg_873 : STD_LOGIC_VECTOR (9 downto 0);
    signal orig_load_5_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_load_6_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_load_7_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_3_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_8_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_1_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_4_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_5_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_5_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_5_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_6_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_6_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_6_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_7_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_1_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_1_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_7_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_7_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln12_6_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln12_7_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln12_2_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_5_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln12_8_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_9_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln12_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_1_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal add21_lcssa_lcssa_phi_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_84 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln8_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln7_4_fu_440_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_fu_342_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_shl1_fu_280_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_272_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_288_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_1_fu_312_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_1_fu_304_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_1_cast_fu_320_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_2_fu_375_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_2_fu_368_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_2_cast_fu_382_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_9_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_2_mid1_fu_416_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_2_mid1_fu_409_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_2_cast_mid1_fu_423_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid112_fu_427_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln7_fu_392_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln7_1_fu_398_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln12_3_fu_445_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln7_2_fu_403_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln7_3_fu_433_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_4_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_3_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_2_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil_2d_mul_32s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stencil_2d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_5_1_U1 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_2_reg_808,
        din1 => filter_load_2,
        ce => ap_const_logic_1,
        dout => grp_fu_524_p2);

    mul_32s_32s_32_5_1_U2 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_3_reg_813,
        din1 => filter_load_3,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);

    mul_32s_32s_32_5_1_U3 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_reg_828,
        din1 => filter_load,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p2);

    mul_32s_32s_32_5_1_U4 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_8_reg_848,
        din1 => filter_load_8,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    mul_32s_32s_32_5_1_U5 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_1_reg_853,
        din1 => filter_load_1,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p2);

    mul_32s_32s_32_5_1_U6 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_4_reg_858,
        din1 => filter_load_4,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);

    mul_32s_32s_32_5_1_U7 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_5_reg_878,
        din1 => filter_load_5,
        ce => ap_const_logic_1,
        dout => grp_fu_574_p2);

    mul_32s_32s_32_5_1_U8 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_6_reg_883,
        din1 => filter_load_6,
        ce => ap_const_logic_1,
        dout => grp_fu_578_p2);

    mul_32s_32s_32_5_1_U9 : component stencil_2d_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => orig_load_7_reg_893,
        din1 => filter_load_7,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p2);

    flow_control_loop_pipe_sequential_init_U : component stencil_2d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    c_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_fu_84 <= ap_const_lv5_0;
            elsif (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                c_fu_84 <= add_ln8_fu_473_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln7_fu_336_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_92 <= add_ln7_fu_342_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_fu_88 <= ap_const_lv5_0;
            elsif (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                r_fu_88 <= select_ln7_4_fu_440_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add21_lcssa_lcssa_phi_fu_80 <= add_ln13_7_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln12_1_reg_803 <= add_ln12_1_fu_506_p2;
                add_ln12_4_reg_818 <= add_ln12_4_fu_511_p2;
                    zext_ln12_4_reg_793(9 downto 0) <= zext_ln12_4_fu_502_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln12_2_reg_759 <= add_ln12_2_fu_455_p2;
                add_ln12_3_reg_764 <= add_ln12_3_fu_461_p2;
                add_ln12_6_reg_771 <= add_ln12_6_fu_467_p2;
                add_ln12_reg_753 <= add_ln12_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln12_5_reg_843 <= add_ln12_5_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln12_7_reg_873 <= add_ln12_7_fu_553_p2;
                add_ln13_5_reg_928 <= add_ln13_5_fu_590_p2;
                empty_6_reg_712 <= empty_6_fu_298_p2;
                    empty_7_reg_717(9 downto 1) <= empty_7_fu_324_p2(9 downto 1);
                empty_8_reg_723 <= empty_8_fu_330_p2;
                    empty_reg_707(9 downto 1) <= empty_fu_292_p2(9 downto 1);
                icmp_ln7_reg_729 <= icmp_ln7_fu_336_p2;
                icmp_ln7_reg_729_pp0_iter1_reg <= icmp_ln7_reg_729;
                mul_ln12_1_reg_918 <= grp_fu_562_p2;
                mul_ln12_4_reg_923 <= grp_fu_566_p2;
                r_1_reg_702 <= ap_sig_allocacmp_r_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln12_8_reg_788 <= add_ln12_8_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln13_1_reg_953 <= add_ln13_1_fu_604_p2;
                mul_ln12_7_reg_948 <= grp_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln13_6_reg_943 <= add_ln13_6_fu_599_p2;
                mul_ln12_5_reg_933 <= grp_fu_574_p2;
                mul_ln12_6_reg_938 <= grp_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln13_7_reg_963 <= add_ln13_7_fu_616_p2;
                mul_ln12_8_reg_913 <= grp_fu_558_p2;
                mul_ln12_reg_908 <= grp_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln13_reg_958 <= add_ln13_fu_608_p2;
                mul_ln12_2_reg_898 <= grp_fu_524_p2;
                mul_ln12_3_reg_903 <= grp_fu_528_p2;
                    zext_ln12_4_reg_793_pp0_iter1_reg(9 downto 0) <= zext_ln12_4_reg_793(9 downto 0);
                    zext_ln12_4_reg_793_pp0_iter2_reg(9 downto 0) <= zext_ln12_4_reg_793_pp0_iter1_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_fu_336_p2 = ap_const_lv1_0))) then
                c_load_reg_733 <= ap_sig_allocacmp_c_load;
                icmp_ln8_reg_738 <= icmp_ln8_fu_351_p2;
                p_mid110_reg_747 <= p_mid110_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                orig_load_1_reg_853 <= orig_q0;
                orig_load_4_reg_858 <= orig_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                orig_load_2_reg_808 <= orig_q0;
                orig_load_3_reg_813 <= orig_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                orig_load_5_reg_878 <= orig_q1;
                orig_load_6_reg_883 <= orig_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                orig_load_7_reg_893 <= orig_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                orig_load_8_reg_848 <= orig_q1;
                orig_load_reg_828 <= orig_q0;
            end if;
        end if;
    end process;
    empty_reg_707(0) <= '0';
    empty_7_reg_717(0) <= '0';
    zext_ln12_4_reg_793(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln12_4_reg_793_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln12_4_reg_793_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add21_lcssa_lcssa_phi_out <= add21_lcssa_lcssa_phi_fu_80;

    add21_lcssa_lcssa_phi_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln7_reg_729_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_reg_729_pp0_iter1_reg = ap_const_lv1_1))) then 
            add21_lcssa_lcssa_phi_out_ap_vld <= ap_const_logic_1;
        else 
            add21_lcssa_lcssa_phi_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln12_1_fu_506_p2 <= std_logic_vector(unsigned(add_ln12_reg_753) + unsigned(ap_const_lv10_1));
    add_ln12_2_fu_455_p2 <= std_logic_vector(unsigned(add_ln12_fu_449_p2) + unsigned(ap_const_lv10_2));
    add_ln12_3_fu_461_p2 <= std_logic_vector(unsigned(select_ln7_2_fu_403_p3) + unsigned(zext_ln12_3_fu_445_p1));
    add_ln12_4_fu_511_p2 <= std_logic_vector(unsigned(add_ln12_3_reg_764) + unsigned(ap_const_lv10_1));
    add_ln12_5_fu_536_p2 <= std_logic_vector(unsigned(add_ln12_3_reg_764) + unsigned(ap_const_lv10_2));
    add_ln12_6_fu_467_p2 <= std_logic_vector(unsigned(select_ln7_3_fu_433_p3) + unsigned(zext_ln12_3_fu_445_p1));
    add_ln12_7_fu_553_p2 <= std_logic_vector(unsigned(add_ln12_6_reg_771) + unsigned(ap_const_lv10_1));
    add_ln12_8_fu_497_p2 <= std_logic_vector(unsigned(add_ln12_6_reg_771) + unsigned(ap_const_lv10_2));
    add_ln12_fu_449_p2 <= std_logic_vector(unsigned(select_ln7_1_fu_398_p3) + unsigned(zext_ln12_3_fu_445_p1));
    add_ln13_1_fu_604_p2 <= std_logic_vector(unsigned(mul_ln12_5_reg_933) + unsigned(mul_ln12_4_reg_923));
    add_ln13_2_fu_612_p2 <= std_logic_vector(unsigned(add_ln13_1_reg_953) + unsigned(add_ln13_reg_958));
    add_ln13_3_fu_595_p2 <= std_logic_vector(unsigned(mul_ln12_reg_908) + unsigned(mul_ln12_1_reg_918));
    add_ln13_4_fu_586_p2 <= std_logic_vector(unsigned(mul_ln12_2_reg_898) + unsigned(mul_ln12_8_reg_913));
    add_ln13_5_fu_590_p2 <= std_logic_vector(unsigned(add_ln13_4_fu_586_p2) + unsigned(mul_ln12_3_reg_903));
    add_ln13_6_fu_599_p2 <= std_logic_vector(unsigned(add_ln13_5_reg_928) + unsigned(add_ln13_3_fu_595_p2));
    add_ln13_7_fu_616_p2 <= std_logic_vector(unsigned(add_ln13_6_reg_943) + unsigned(add_ln13_2_fu_612_p2));
    add_ln13_fu_608_p2 <= std_logic_vector(unsigned(mul_ln12_6_reg_938) + unsigned(mul_ln12_7_reg_948));
    add_ln7_fu_342_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln8_fu_473_p2 <= std_logic_vector(unsigned(select_ln7_fu_392_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln7_reg_729)
    begin
        if (((icmp_ln7_reg_729 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln7_reg_729_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_reg_729_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_88;
        end if; 
    end process;

    empty_6_fu_298_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv5_1));
    empty_7_fu_324_p2 <= std_logic_vector(unsigned(p_shl2_1_fu_304_p3) - unsigned(p_shl3_1_cast_fu_320_p1));
    empty_8_fu_330_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv5_2));
    empty_9_fu_386_p2 <= std_logic_vector(unsigned(p_shl2_2_fu_368_p3) - unsigned(p_shl3_2_cast_fu_382_p1));
    empty_fu_292_p2 <= std_logic_vector(unsigned(p_shl_fu_272_p3) - unsigned(p_shl1_cast_fu_288_p1));
    icmp_ln7_fu_336_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_310) else "0";
    icmp_ln8_fu_351_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv5_1C) else "0";

    orig_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln12_4_fu_502_p1, ap_CS_fsm_pp0_stage3, zext_ln12_6_fu_489_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln12_5_fu_520_p1, ap_block_pp0_stage4, ap_block_pp0_stage0, zext_ln12_fu_549_p1, zext_ln12_1_fu_570_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            orig_address0 <= zext_ln12_1_fu_570_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_address0 <= zext_ln12_fu_549_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            orig_address0 <= zext_ln12_5_fu_520_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            orig_address0 <= zext_ln12_4_fu_502_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            orig_address0 <= zext_ln12_6_fu_489_p1(10 - 1 downto 0);
        else 
            orig_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    orig_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2, zext_ln12_7_fu_493_p1, ap_block_pp0_stage3, zext_ln12_2_fu_516_p1, ap_block_pp0_stage4, zext_ln12_8_fu_532_p1, zext_ln12_9_fu_545_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            orig_address1 <= zext_ln12_9_fu_545_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            orig_address1 <= zext_ln12_8_fu_532_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            orig_address1 <= zext_ln12_2_fu_516_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            orig_address1 <= zext_ln12_7_fu_493_p1(10 - 1 downto 0);
        else 
            orig_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    orig_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            orig_ce0 <= ap_const_logic_1;
        else 
            orig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            orig_ce1 <= ap_const_logic_1;
        else 
            orig_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid110_fu_357_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv5_3));
    p_mid112_fu_427_p2 <= std_logic_vector(unsigned(p_shl2_2_mid1_fu_409_p3) - unsigned(p_shl3_2_cast_mid1_fu_423_p1));
    p_shl1_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_280_p3),10));
    p_shl1_fu_280_p3 <= (ap_sig_allocacmp_r_1 & ap_const_lv1_0);
    p_shl2_1_fu_304_p3 <= (empty_6_fu_298_p2 & ap_const_lv5_0);
    p_shl2_2_fu_368_p3 <= (empty_8_reg_723 & ap_const_lv5_0);
    p_shl2_2_mid1_fu_409_p3 <= (p_mid110_reg_747 & ap_const_lv5_0);
    p_shl3_1_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_1_fu_312_p3),10));
    p_shl3_1_fu_312_p3 <= (empty_6_fu_298_p2 & ap_const_lv1_0);
    p_shl3_2_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_2_fu_375_p3),10));
    p_shl3_2_cast_mid1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_2_mid1_fu_416_p3),10));
    p_shl3_2_fu_375_p3 <= (empty_8_reg_723 & ap_const_lv1_0);
    p_shl3_2_mid1_fu_416_p3 <= (p_mid110_reg_747 & ap_const_lv1_0);
    p_shl_fu_272_p3 <= (ap_sig_allocacmp_r_1 & ap_const_lv5_0);
    select_ln7_1_fu_398_p3 <= 
        empty_7_reg_717 when (icmp_ln8_reg_738(0) = '1') else 
        empty_reg_707;
    select_ln7_2_fu_403_p3 <= 
        empty_9_fu_386_p2 when (icmp_ln8_reg_738(0) = '1') else 
        empty_7_reg_717;
    select_ln7_3_fu_433_p3 <= 
        p_mid112_fu_427_p2 when (icmp_ln8_reg_738(0) = '1') else 
        empty_9_fu_386_p2;
    select_ln7_4_fu_440_p3 <= 
        empty_6_reg_712 when (icmp_ln8_reg_738(0) = '1') else 
        r_1_reg_702;
    select_ln7_fu_392_p3 <= 
        ap_const_lv5_0 when (icmp_ln8_reg_738(0) = '1') else 
        c_load_reg_733;
    sol_address0 <= zext_ln12_4_reg_793_pp0_iter2_reg(10 - 1 downto 0);

    sol_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sol_ce0 <= ap_const_logic_1;
        else 
            sol_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sol_d0 <= add_ln13_7_reg_963;

    sol_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sol_we0 <= ap_const_logic_1;
        else 
            sol_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_1_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_7_reg_873),64));
    zext_ln12_2_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_8_reg_788),64));
    zext_ln12_3_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_fu_392_p3),10));
    zext_ln12_4_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_reg_753),64));
    zext_ln12_5_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_reg_803),64));
    zext_ln12_6_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_2_reg_759),64));
    zext_ln12_7_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_3_reg_764),64));
    zext_ln12_8_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_4_reg_818),64));
    zext_ln12_9_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_5_reg_843),64));
    zext_ln12_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_6_reg_771),64));
end behav;
