-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_2mm_kernel_2mm_Pipeline_VITIS_LOOP_15_1_VITIS_LOOP_16_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tmp_ce0 : OUT STD_LOGIC;
    tmp_we0 : OUT STD_LOGIC;
    tmp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_ce : OUT STD_LOGIC;
    grp_fu_88_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_88_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_88_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_88_p_ce : OUT STD_LOGIC;
    grp_fu_92_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_92_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_92_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_92_p_ce : OUT STD_LOGIC;
    grp_fu_96_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_96_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_96_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_96_p_ce : OUT STD_LOGIC;
    grp_fu_100_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_100_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_100_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_100_p_ce : OUT STD_LOGIC;
    grp_fu_104_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_104_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_104_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_104_p_ce : OUT STD_LOGIC;
    grp_fu_108_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_108_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_108_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_108_p_ce : OUT STD_LOGIC;
    grp_fu_112_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_112_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_112_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_112_p_ce : OUT STD_LOGIC;
    grp_fu_116_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_116_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_116_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_116_p_ce : OUT STD_LOGIC;
    grp_fu_120_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_120_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_120_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_120_p_ce : OUT STD_LOGIC;
    grp_fu_124_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_124_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_124_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_124_p_ce : OUT STD_LOGIC );
end;


architecture behav of kernel_2mm_kernel_2mm_Pipeline_VITIS_LOOP_15_1_VITIS_LOOP_16_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln15_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_816 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln15_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_reg_827 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln18_3_fu_359_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_3_reg_849 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_3_reg_849_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_17_fu_363_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_17_reg_857 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_1_fu_422_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_1_reg_862 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln15_1_reg_862_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_2_fu_427_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_2_reg_868 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_2_reg_868_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_6_fu_434_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_6_reg_880 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_7_fu_440_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_7_reg_885 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_18_fu_462_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_18_reg_900 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln15_8_fu_490_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_8_reg_915 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_1_fu_499_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_1_reg_920 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_11_fu_505_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_11_reg_931 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_12_fu_511_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_12_reg_936 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_load_7_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_8_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_7_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal A_load_8_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_13_fu_533_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_13_reg_981 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_14_fu_538_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln20_14_reg_986 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_load_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_9_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_9_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln20_15_fu_559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_15_reg_1016 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_16_fu_564_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_16_reg_1021 : STD_LOGIC_VECTOR (6 downto 0);
    signal B_load_1_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_2_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_3_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_4_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_5_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_6_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_1_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_1_fu_615_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_1_reg_1086 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln20_14_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_16_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_2_fu_632_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_2_reg_1106 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_3_fu_637_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_3_reg_1111 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln20_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_18_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_2_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_4_fu_682_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_4_reg_1141 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_5_fu_687_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_5_reg_1146 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_1_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_1_reg_1151 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_1_reg_1151_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln20_2_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_4_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_3_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_4_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_6_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_8_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_5_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_6_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_10_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_12_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_15_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_17_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_1_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_19_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_3_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_5_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_6_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_6_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_7_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_9_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_11_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_13_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_2_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_2_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_7_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_7_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_8_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_8_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln20_18_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln20_19_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_9_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln20_10_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_20_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_11_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln20_12_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_13_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_14_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln20_15_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_16_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln20_17_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_2_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_3_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_4_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_5_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_6_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_7_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_8_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_4_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_467_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_9_fu_330_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_381_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_374_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln20_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_405_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_398_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln20_1_fu_412_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_10_fu_416_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_9_fu_392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_450_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_2_fu_502_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln15_fu_597_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_657_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_650_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_fu_664_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_fu_668_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_5_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_1_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_4_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_3_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_2mm_mul_32s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_2mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_5_1_U12 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_16_reg_1096,
        din1 => A_load_8_reg_961,
        ce => ap_const_logic_1,
        dout => grp_fu_646_p2);

    mul_32s_32s_32_5_1_U13 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_reg_1116,
        din1 => A_load_reg_1076,
        ce => ap_const_logic_1,
        dout => grp_fu_697_p2);

    mul_32s_32s_32_5_1_U14 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_18_reg_1121,
        din1 => A_load_9_reg_1001,
        ce => ap_const_logic_1,
        dout => grp_fu_701_p2);

    mul_32s_32s_32_5_1_U15 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_2_reg_1156,
        din1 => A_load_1_reg_1081,
        ce => ap_const_logic_1,
        dout => grp_fu_713_p2);

    mul_32s_32s_32_5_1_U16 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_4_reg_1161,
        din1 => A_load_2_reg_1126,
        ce => ap_const_logic_1,
        dout => grp_fu_717_p2);

    mul_32s_32s_32_5_1_U17 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_6_reg_1186,
        din1 => A_load_3_reg_1166,
        ce => ap_const_logic_1,
        dout => grp_fu_721_p2);

    mul_32s_32s_32_5_1_U18 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_8_reg_1191,
        din1 => A_load_4_reg_1171,
        ce => ap_const_logic_1,
        dout => grp_fu_725_p2);

    mul_32s_32s_32_5_1_U19 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_10_reg_1206,
        din1 => A_load_5_reg_1196,
        ce => ap_const_logic_1,
        dout => grp_fu_729_p2);

    mul_32s_32s_32_5_1_U20 : component kernel_2mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln20_12_reg_1211,
        din1 => A_load_6_reg_1201,
        ce => ap_const_logic_1,
        dout => grp_fu_733_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_2mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_98 <= ap_const_lv4_0;
            elsif (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_98 <= select_ln15_1_fu_422_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_324_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_102 <= add_ln15_9_fu_330_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_94 <= ap_const_lv4_0;
            elsif (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_94 <= add_ln16_fu_467_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                A_load_1_reg_1081 <= A_q0;
                A_load_reg_1076 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                A_load_2_reg_1126 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                A_load_3_reg_1166 <= A_q1;
                A_load_4_reg_1171 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                A_load_5_reg_1196 <= A_q1;
                A_load_6_reg_1201 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                A_load_7_reg_956 <= A_q1;
                A_load_8_reg_961 <= A_q0;
                B_load_9_reg_996 <= B_q0;
                B_load_reg_991 <= B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                A_load_9_reg_1001 <= A_q1;
                B_load_1_reg_1026 <= B_q1;
                B_load_2_reg_1031 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                B_load_3_reg_1046 <= B_q1;
                B_load_4_reg_1051 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                B_load_5_reg_1066 <= B_q1;
                B_load_6_reg_1071 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                B_load_7_reg_946 <= B_q1;
                B_load_8_reg_951 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    add_ln15_1_reg_1086(6 downto 1) <= add_ln15_1_fu_615_p2(6 downto 1);
                add_ln20_7_reg_1281 <= add_ln20_7_fu_763_p2;
                mul_ln20_14_reg_1091 <= grp_fu_84_p_dout0;
                mul_ln20_15_reg_1216 <= grp_fu_124_p_dout0;
                mul_ln20_16_reg_1096 <= grp_fu_88_p_dout0;
                mul_ln20_17_reg_1221 <= grp_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    add_ln15_2_reg_1106(6 downto 1) <= add_ln15_2_fu_632_p2(6 downto 1);
                    add_ln15_3_reg_1111(6 downto 1) <= add_ln15_3_fu_637_p2(6 downto 1);
                add_ln20_8_reg_1286 <= add_ln20_8_fu_772_p2;
                mul_ln20_18_reg_1121 <= grp_fu_96_p_dout0;
                mul_ln20_19_reg_1231 <= grp_fu_701_p2;
                mul_ln20_1_reg_1226 <= grp_fu_697_p2;
                mul_ln20_reg_1116 <= grp_fu_92_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    add_ln15_4_reg_1141(6 downto 1) <= add_ln15_4_fu_682_p2(6 downto 1);
                    add_ln15_5_reg_1146(6 downto 1) <= add_ln15_5_fu_687_p2(6 downto 1);
                add_ln18_1_reg_1151 <= add_ln18_1_fu_692_p2;
                add_ln18_1_reg_1151_pp0_iter2_reg <= add_ln18_1_reg_1151;
                add_ln20_6_reg_1246 <= add_ln20_6_fu_741_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                mul_ln20_2_reg_1156 <= grp_fu_100_p_dout0;
                mul_ln20_3_reg_1236 <= grp_fu_713_p2;
                mul_ln20_4_reg_1161 <= grp_fu_104_p_dout0;
                mul_ln20_5_reg_1241 <= grp_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    add_ln15_6_reg_880(6 downto 1) <= add_ln15_6_fu_434_p2(6 downto 1);
                    add_ln15_7_reg_885(6 downto 1) <= add_ln15_7_fu_440_p2(6 downto 1);
                add_ln20_18_reg_900 <= add_ln20_18_fu_462_p2;
                select_ln15_1_reg_862 <= select_ln15_1_fu_422_p3;
                    select_ln15_2_reg_868(6 downto 1) <= select_ln15_2_fu_427_p3(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    add_ln15_8_reg_915(6 downto 1) <= add_ln15_8_fu_490_p2(6 downto 1);
                add_ln20_11_reg_931 <= add_ln20_11_fu_505_p2;
                add_ln20_12_reg_936 <= add_ln20_12_fu_511_p2;
                    zext_ln18_1_reg_920(3 downto 0) <= zext_ln18_1_fu_499_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln15_fu_324_p2 = ap_const_lv1_0))) then
                add_ln15_reg_827 <= add_ln15_fu_339_p2;
                add_ln20_17_reg_857 <= add_ln20_17_fu_363_p2;
                icmp_ln16_reg_834 <= icmp_ln16_fu_345_p2;
                select_ln15_reg_840 <= select_ln15_fu_351_p3;
                    zext_ln18_3_reg_849(3 downto 0) <= zext_ln18_3_fu_359_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln20_13_reg_981 <= add_ln20_13_fu_533_p2;
                add_ln20_14_reg_986 <= add_ln20_14_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_823 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln20_15_reg_1016 <= add_ln20_15_fu_559_p2;
                add_ln20_16_reg_1021 <= add_ln20_16_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln20_2_reg_1276 <= add_ln20_2_fu_754_p2;
                mul_ln20_10_reg_1206 <= grp_fu_116_p_dout0;
                mul_ln20_11_reg_1266 <= grp_fu_729_p2;
                mul_ln20_12_reg_1211 <= grp_fu_120_p_dout0;
                mul_ln20_13_reg_1271 <= grp_fu_733_p2;
                select_ln15_1_reg_862_pp0_iter1_reg <= select_ln15_1_reg_862;
                    select_ln15_2_reg_868_pp0_iter1_reg(6 downto 1) <= select_ln15_2_reg_868(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln20_reg_1261 <= add_ln20_fu_746_p2;
                i_2_reg_816 <= ap_sig_allocacmp_i_2;
                icmp_ln15_reg_823 <= icmp_ln15_fu_324_p2;
                mul_ln20_6_reg_1186 <= grp_fu_108_p_dout0;
                mul_ln20_7_reg_1251 <= grp_fu_721_p2;
                mul_ln20_8_reg_1191 <= grp_fu_112_p_dout0;
                mul_ln20_9_reg_1256 <= grp_fu_725_p2;
                    zext_ln18_3_reg_849_pp0_iter1_reg(3 downto 0) <= zext_ln18_3_reg_849(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln18_3_reg_849(6 downto 4) <= "000";
    zext_ln18_3_reg_849_pp0_iter1_reg(6 downto 4) <= "000";
    select_ln15_2_reg_868(0) <= '0';
    select_ln15_2_reg_868_pp0_iter1_reg(0) <= '0';
    add_ln15_6_reg_880(0) <= '1';
    add_ln15_7_reg_885(0) <= '0';
    add_ln15_8_reg_915(0) <= '1';
    zext_ln18_1_reg_920(5 downto 4) <= "00";
    add_ln15_1_reg_1086(0) <= '0';
    add_ln15_2_reg_1106(0) <= '1';
    add_ln15_3_reg_1111(0) <= '0';
    add_ln15_4_reg_1141(0) <= '1';
    add_ln15_5_reg_1146(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln20_10_fu_486_p1, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0, zext_ln20_3_fu_602_p1, zext_ln20_4_fu_628_p1, zext_ln20_6_fu_678_p1, zext_ln20_8_fu_709_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address0 <= zext_ln20_8_fu_709_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            A_address0 <= zext_ln20_6_fu_678_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            A_address0 <= zext_ln20_4_fu_628_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_address0 <= zext_ln20_3_fu_602_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            A_address0 <= zext_ln20_10_fu_486_p1(7 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln20_9_fu_482_p1, ap_block_pp0_stage2, zext_ln20_11_fu_521_p1, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0, zext_ln20_2_fu_593_p1, zext_ln20_5_fu_674_p1, zext_ln20_7_fu_705_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address1 <= zext_ln20_7_fu_705_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            A_address1 <= zext_ln20_5_fu_674_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_address1 <= zext_ln20_2_fu_593_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            A_address1 <= zext_ln20_11_fu_521_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            A_address1 <= zext_ln20_9_fu_482_p1(7 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln20_19_fu_457_p1, ap_block_pp0_stage2, zext_ln20_20_fu_517_p1, ap_block_pp0_stage3, zext_ln20_13_fu_529_p1, ap_block_pp0_stage4, zext_ln20_15_fu_555_p1, ap_block_pp0_stage0, zext_ln20_17_fu_581_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_address0 <= zext_ln20_17_fu_581_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            B_address0 <= zext_ln20_15_fu_555_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            B_address0 <= zext_ln20_13_fu_529_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            B_address0 <= zext_ln20_20_fu_517_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_address0 <= zext_ln20_19_fu_457_p1(7 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln20_18_fu_446_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, j_cast_fu_495_p1, ap_block_pp0_stage3, zext_ln20_12_fu_525_p1, zext_ln20_14_fu_551_p1, ap_block_pp0_stage4, zext_ln20_16_fu_577_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_address1 <= zext_ln20_16_fu_577_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            B_address1 <= zext_ln20_14_fu_551_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            B_address1 <= zext_ln20_12_fu_525_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            B_address1 <= j_cast_fu_495_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_address1 <= zext_ln20_18_fu_446_p1(7 - 1 downto 0);
        else 
            B_address1 <= "XXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_1_fu_615_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_868_pp0_iter1_reg) + unsigned(ap_const_lv7_2));
    add_ln15_2_fu_632_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_868_pp0_iter1_reg) + unsigned(ap_const_lv7_3));
    add_ln15_3_fu_637_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_868_pp0_iter1_reg) + unsigned(ap_const_lv7_4));
    add_ln15_4_fu_682_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_868_pp0_iter1_reg) + unsigned(ap_const_lv7_5));
    add_ln15_5_fu_687_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_868_pp0_iter1_reg) + unsigned(ap_const_lv7_6));
    add_ln15_6_fu_434_p2 <= std_logic_vector(unsigned(select_ln15_2_fu_427_p3) + unsigned(ap_const_lv7_7));
    add_ln15_7_fu_440_p2 <= std_logic_vector(unsigned(select_ln15_2_fu_427_p3) + unsigned(ap_const_lv7_8));
    add_ln15_8_fu_490_p2 <= std_logic_vector(unsigned(select_ln15_2_reg_868) + unsigned(ap_const_lv7_9));
    add_ln15_9_fu_330_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln15_fu_339_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_1));
    add_ln16_fu_467_p2 <= std_logic_vector(unsigned(select_ln15_reg_840) + unsigned(ap_const_lv4_1));
    add_ln18_1_fu_692_p2 <= std_logic_vector(unsigned(add_ln18_fu_668_p2) + unsigned(zext_ln18_3_reg_849_pp0_iter1_reg));
    add_ln18_fu_668_p2 <= std_logic_vector(unsigned(tmp_5_fu_650_p3) + unsigned(zext_ln18_fu_664_p1));
    add_ln20_10_fu_416_p2 <= std_logic_vector(unsigned(tmp_3_fu_398_p3) + unsigned(zext_ln20_1_fu_412_p1));
    add_ln20_11_fu_505_p2 <= std_logic_vector(unsigned(zext_ln18_2_fu_502_p1) + unsigned(ap_const_lv5_A));
    add_ln20_12_fu_511_p2 <= std_logic_vector(unsigned(zext_ln18_1_fu_499_p1) + unsigned(ap_const_lv6_14));
    add_ln20_13_fu_533_p2 <= std_logic_vector(unsigned(zext_ln18_1_reg_920) + unsigned(ap_const_lv6_1E));
    add_ln20_14_fu_538_p2 <= std_logic_vector(unsigned(zext_ln18_1_reg_920) + unsigned(ap_const_lv6_28));
    add_ln20_15_fu_559_p2 <= std_logic_vector(unsigned(zext_ln18_3_reg_849) + unsigned(ap_const_lv7_32));
    add_ln20_16_fu_564_p2 <= std_logic_vector(unsigned(zext_ln18_3_reg_849) + unsigned(ap_const_lv7_3C));
    add_ln20_17_fu_363_p2 <= std_logic_vector(unsigned(zext_ln18_3_fu_359_p1) + unsigned(ap_const_lv7_46));
    add_ln20_18_fu_462_p2 <= std_logic_vector(unsigned(zext_ln18_3_reg_849) + unsigned(ap_const_lv7_5A));
    add_ln20_1_fu_750_p2 <= std_logic_vector(unsigned(mul_ln20_7_reg_1251) + unsigned(mul_ln20_9_reg_1256));
    add_ln20_2_fu_754_p2 <= std_logic_vector(unsigned(add_ln20_1_fu_750_p2) + unsigned(mul_ln20_5_reg_1241));
    add_ln20_3_fu_768_p2 <= std_logic_vector(unsigned(add_ln20_2_reg_1276) + unsigned(add_ln20_reg_1261));
    add_ln20_4_fu_759_p2 <= std_logic_vector(unsigned(mul_ln20_11_reg_1266) + unsigned(mul_ln20_13_reg_1271));
    add_ln20_5_fu_737_p2 <= std_logic_vector(unsigned(mul_ln20_17_reg_1221) + unsigned(mul_ln20_19_reg_1231));
    add_ln20_6_fu_741_p2 <= std_logic_vector(unsigned(add_ln20_5_fu_737_p2) + unsigned(mul_ln20_15_reg_1216));
    add_ln20_7_fu_763_p2 <= std_logic_vector(unsigned(add_ln20_6_reg_1246) + unsigned(add_ln20_4_fu_759_p2));
    add_ln20_8_fu_772_p2 <= std_logic_vector(unsigned(add_ln20_7_reg_1281) + unsigned(add_ln20_3_fu_768_p2));
    add_ln20_9_fu_392_p2 <= std_logic_vector(unsigned(tmp_1_fu_374_p3) + unsigned(zext_ln20_fu_388_p1));
    add_ln20_fu_746_p2 <= std_logic_vector(unsigned(mul_ln20_3_reg_1236) + unsigned(mul_ln20_1_reg_1226));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln15_reg_823)
    begin
        if (((icmp_ln15_reg_823 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_94, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_94;
        end if; 
    end process;

    grp_fu_100_p_ce <= ap_const_logic_1;
    grp_fu_100_p_din0 <= B_load_1_reg_1026;
    grp_fu_100_p_din1 <= alpha;
    grp_fu_104_p_ce <= ap_const_logic_1;
    grp_fu_104_p_din0 <= B_load_2_reg_1031;
    grp_fu_104_p_din1 <= alpha;
    grp_fu_108_p_ce <= ap_const_logic_1;
    grp_fu_108_p_din0 <= B_load_3_reg_1046;
    grp_fu_108_p_din1 <= alpha;
    grp_fu_112_p_ce <= ap_const_logic_1;
    grp_fu_112_p_din0 <= B_load_4_reg_1051;
    grp_fu_112_p_din1 <= alpha;
    grp_fu_116_p_ce <= ap_const_logic_1;
    grp_fu_116_p_din0 <= B_load_5_reg_1066;
    grp_fu_116_p_din1 <= alpha;
    grp_fu_120_p_ce <= ap_const_logic_1;
    grp_fu_120_p_din0 <= B_load_6_reg_1071;
    grp_fu_120_p_din1 <= alpha;
    grp_fu_124_p_ce <= ap_const_logic_1;
    grp_fu_124_p_din0 <= mul_ln20_14_reg_1091;
    grp_fu_124_p_din1 <= A_load_7_reg_956;
    grp_fu_84_p_ce <= ap_const_logic_1;
    grp_fu_84_p_din0 <= B_load_7_reg_946;
    grp_fu_84_p_din1 <= alpha;
    grp_fu_88_p_ce <= ap_const_logic_1;
    grp_fu_88_p_din0 <= B_load_8_reg_951;
    grp_fu_88_p_din1 <= alpha;
    grp_fu_92_p_ce <= ap_const_logic_1;
    grp_fu_92_p_din0 <= B_load_reg_991;
    grp_fu_92_p_din1 <= alpha;
    grp_fu_96_p_ce <= ap_const_logic_1;
    grp_fu_96_p_din0 <= B_load_9_reg_996;
    grp_fu_96_p_din1 <= alpha;
    icmp_ln15_fu_324_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_64) else "0";
    icmp_ln16_fu_345_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    j_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_reg_840),64));
    or_ln15_fu_597_p2 <= (select_ln15_2_reg_868 or ap_const_lv7_1);
    select_ln15_1_fu_422_p3 <= 
        add_ln15_reg_827 when (icmp_ln16_reg_834(0) = '1') else 
        i_2_reg_816;
    select_ln15_2_fu_427_p3 <= 
        add_ln20_10_fu_416_p2 when (icmp_ln16_reg_834(0) = '1') else 
        add_ln20_9_fu_392_p2;
    select_ln15_fu_351_p3 <= 
        ap_const_lv4_0 when (icmp_ln16_fu_345_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_1_fu_374_p3 <= (i_2_reg_816 & ap_const_lv3_0);
    tmp_2_fu_381_p3 <= (i_2_reg_816 & ap_const_lv1_0);
    tmp_3_fu_398_p3 <= (add_ln15_reg_827 & ap_const_lv3_0);
    tmp_4_fu_405_p3 <= (add_ln15_reg_827 & ap_const_lv1_0);
    tmp_5_fu_650_p3 <= (select_ln15_1_reg_862_pp0_iter1_reg & ap_const_lv3_0);
    tmp_6_fu_657_p3 <= (select_ln15_1_reg_862_pp0_iter1_reg & ap_const_lv1_0);
    tmp_7_cast_fu_450_p3 <= (ap_const_lv3_5 & select_ln15_reg_840);
    tmp_address0 <= zext_ln18_4_fu_777_p1(7 - 1 downto 0);

    tmp_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= add_ln20_8_reg_1286;

    tmp_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln18_1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_reg_840),6));
    zext_ln18_2_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_reg_840),5));
    zext_ln18_3_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_fu_351_p3),7));
    zext_ln18_4_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_1_reg_1151_pp0_iter2_reg),64));
    zext_ln18_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_657_p3),7));
    zext_ln20_10_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_7_reg_885),64));
    zext_ln20_11_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_8_reg_915),64));
    zext_ln20_12_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_11_reg_931),64));
    zext_ln20_13_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_12_reg_936),64));
    zext_ln20_14_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_13_reg_981),64));
    zext_ln20_15_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_14_reg_986),64));
    zext_ln20_16_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_15_reg_1016),64));
    zext_ln20_17_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_16_reg_1021),64));
    zext_ln20_18_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_17_reg_857),64));
    zext_ln20_19_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_450_p3),64));
    zext_ln20_1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_405_p3),7));
    zext_ln20_20_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_18_reg_900),64));
    zext_ln20_2_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_2_reg_868),64));
    zext_ln20_3_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_fu_597_p2),64));
    zext_ln20_4_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_1_reg_1086),64));
    zext_ln20_5_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_2_reg_1106),64));
    zext_ln20_6_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_reg_1111),64));
    zext_ln20_7_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_reg_1141),64));
    zext_ln20_8_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_5_reg_1146),64));
    zext_ln20_9_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_6_reg_880),64));
    zext_ln20_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_381_p3),7));
end behav;
