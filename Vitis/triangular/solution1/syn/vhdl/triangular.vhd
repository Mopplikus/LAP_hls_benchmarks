-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity triangular is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of triangular is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "triangular_triangular,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck24-ubva530-2LV-c,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.490000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=811,HLS_SYN_LUT=866,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_fu_104_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln5_reg_221 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln7_fu_141_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln7_reg_243 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln5_1_fu_153_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln5_1_reg_251 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_load_reg_265 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_load_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln7_fu_182_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln7_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start : STD_LOGIC;
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_done : STD_LOGIC;
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_idle : STD_LOGIC;
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_ready : STD_LOGIC;
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_ce0 : STD_LOGIC;
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_we0 : STD_LOGIC;
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_ce1 : STD_LOGIC;
    signal i_0_lcssa_reg_71 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln5_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_cast_cast_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_fu_44 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln5_2_fu_191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal i_1_fu_48 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln5_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_165_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component triangular_triangular_Pipeline_VITIS_LOOP_7_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indvars_iv : IN STD_LOGIC_VECTOR (63 downto 0);
        i_1 : IN STD_LOGIC_VECTOR (13 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        idxprom11 : IN STD_LOGIC_VECTOR (13 downto 0);
        select_ln7 : IN STD_LOGIC_VECTOR (63 downto 0);
        x_load : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82 : component triangular_triangular_Pipeline_VITIS_LOOP_7_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start,
        ap_done => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_done,
        ap_idle => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_idle,
        ap_ready => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_ready,
        indvars_iv => indvars_iv_load_reg_265,
        i_1 => trunc_ln7_reg_243,
        A_address0 => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_address0,
        A_ce0 => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_ce0,
        A_we0 => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_we0,
        A_d0 => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_d0,
        A_q0 => A_q0,
        A_address1 => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_address1,
        A_ce1 => grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_ce1,
        A_q1 => A_q1,
        idxprom11 => trunc_ln5_reg_221,
        select_ln7 => select_ln7_reg_275,
        x_load => x_load_reg_270);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_ready = ap_const_logic_1)) then 
                    grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_lcssa_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_145_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_lcssa_reg_71 <= ap_const_lv32_FFFFFFFF;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln5_fu_108_p2 = ap_const_lv1_0))) then 
                i_0_lcssa_reg_71 <= i_fu_98_p2;
            end if; 
        end if;
    end process;

    i_1_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln5_fu_108_p2 = ap_const_lv1_1))) then 
                i_1_fu_48 <= zext_ln5_fu_124_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                i_1_fu_48 <= add_ln5_1_reg_251;
            end if; 
        end if;
    end process;

    indvars_iv_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln5_fu_108_p2 = ap_const_lv1_1))) then 
                indvars_iv_fu_44 <= sext_ln5_fu_120_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                indvars_iv_fu_44 <= add_ln5_2_fu_191_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_145_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln5_1_reg_251 <= add_ln5_1_fu_153_p2;
                icmp_ln7_reg_256 <= icmp_ln7_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                indvars_iv_load_reg_265 <= indvars_iv_fu_44;
                select_ln7_reg_275 <= select_ln7_fu_182_p3;
                x_load_reg_270 <= x_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln5_reg_221 <= trunc_ln5_fu_104_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln7_reg_243 <= trunc_ln7_fu_141_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_145_p3, icmp_ln7_fu_159_p2, icmp_ln5_fu_108_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln5_fu_108_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln5_fu_108_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_145_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((icmp_ln7_fu_159_p2 = ap_const_lv1_0) and (tmp_fu_145_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    A_address0 <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_address0;
    A_address1 <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_address1;
    A_ce0 <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_ce0;
    A_ce1 <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_ce1;
    A_d0 <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_d0;
    A_we0 <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_A_we0;
    add_ln5_1_fu_153_p2 <= std_logic_vector(unsigned(i_1_fu_48) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    add_ln5_2_fu_191_p2 <= std_logic_vector(unsigned(indvars_iv_fu_44) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    add_ln5_fu_114_p2 <= std_logic_vector(unsigned(n) + unsigned(ap_const_lv32_FFFFFFFE));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state4_on_subcall_done_assign_proc : process(icmp_ln7_reg_256, grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_done = ap_const_logic_0) and (icmp_ln7_reg_256 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(i_0_lcssa_reg_71) + unsigned(n));
    empty_fu_165_p1 <= i_1_fu_48(7 - 1 downto 0);
    grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start <= grp_triangular_Pipeline_VITIS_LOOP_7_2_fu_82_ap_start_reg;
    i_1_cast_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_165_p1),64));
    i_fu_98_p2 <= std_logic_vector(unsigned(n) + unsigned(ap_const_lv32_FFFFFFFF));
    icmp_ln5_fu_108_p2 <= "1" when (signed(n) > signed(ap_const_lv32_0)) else "0";
    icmp_ln7_fu_159_p2 <= "1" when (signed(i_1_fu_48) > signed(ap_const_lv64_0)) else "0";
    select_ln7_fu_182_p3 <= 
        indvars_iv_fu_44 when (tmp_1_fu_174_p3(0) = '1') else 
        ap_const_lv64_0;
        sext_ln5_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln5_fu_114_p2),64));

    tmp_1_fu_174_p3 <= indvars_iv_fu_44(63 downto 63);
    tmp_fu_145_p3 <= i_1_fu_48(63 downto 63);
    trunc_ln5_fu_104_p1 <= n(14 - 1 downto 0);
    trunc_ln7_fu_141_p1 <= i_1_fu_48(14 - 1 downto 0);
    x_address0 <= i_1_cast_cast_fu_169_p1(7 - 1 downto 0);

    x_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln5_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_98_p2),64));
end behav;
