// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="triangular_triangular,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.349000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1058,HLS_SYN_LUT=865,HLS_VERSION=2022_2}" *)

module triangular (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        n,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [13:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [13:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
input  [31:0] n;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] i_fu_97_p2;
wire   [13:0] trunc_ln8_fu_103_p1;
reg   [13:0] trunc_ln8_reg_220;
wire   [13:0] trunc_ln10_fu_140_p1;
reg   [13:0] trunc_ln10_reg_242;
wire    ap_CS_fsm_state2;
wire   [63:0] add_ln8_1_fu_152_p2;
reg   [63:0] add_ln8_1_reg_250;
wire   [0:0] tmp_fu_144_p3;
wire   [0:0] icmp_ln10_fu_158_p2;
reg   [0:0] icmp_ln10_reg_255;
reg   [31:0] x_load_reg_264;
wire    ap_CS_fsm_state3;
reg   [63:0] indvars_iv_load_reg_269;
wire    ap_CS_fsm_state4;
wire   [63:0] select_ln10_fu_181_p3;
reg   [63:0] select_ln10_reg_274;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_done;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_idle;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_ready;
wire   [13:0] grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_address0;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_ce0;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_we0;
wire   [31:0] grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_d0;
wire   [13:0] grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_address1;
wire    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_ce1;
reg   [31:0] i_0_lcssa_reg_71;
wire   [0:0] icmp_ln8_fu_107_p2;
reg    grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] i_1_cast_cast_fu_168_p1;
reg   [63:0] indvars_iv_fu_44;
wire   [63:0] add_ln8_2_fu_190_p2;
wire  signed [63:0] sext_ln8_fu_119_p1;
reg    ap_block_state5_on_subcall_done;
reg   [63:0] i_1_fu_48;
wire   [63:0] zext_ln8_fu_123_p1;
wire   [31:0] add_ln8_fu_113_p2;
wire   [6:0] empty_fu_164_p1;
wire   [0:0] tmp_1_fu_173_p3;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start_reg = 1'b0;
end

triangular_triangular_Pipeline_VITIS_LOOP_10_2 grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start),
    .ap_done(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_done),
    .ap_idle(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_idle),
    .ap_ready(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_ready),
    .indvars_iv(indvars_iv_load_reg_269),
    .i_1(trunc_ln10_reg_242),
    .A_address0(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_address0),
    .A_ce0(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_ce0),
    .A_we0(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_we0),
    .A_d0(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_d0),
    .A_q0(A_q0),
    .A_address1(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_address1),
    .A_ce1(grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_ce1),
    .A_q1(A_q1),
    .idxprom11(trunc_ln8_reg_220),
    .select_ln10(select_ln10_reg_274),
    .x_load(x_load_reg_264)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_ready == 1'b1)) begin
            grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_144_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_lcssa_reg_71 <= 32'd4294967295;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln8_fu_107_p2 == 1'd0))) begin
        i_0_lcssa_reg_71 <= i_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln8_fu_107_p2 == 1'd1))) begin
        i_1_fu_48 <= zext_ln8_fu_123_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        i_1_fu_48 <= add_ln8_1_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln8_fu_107_p2 == 1'd1))) begin
        indvars_iv_fu_44 <= sext_ln8_fu_119_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        indvars_iv_fu_44 <= add_ln8_2_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_144_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln8_1_reg_250 <= add_ln8_1_fu_152_p2;
        icmp_ln10_reg_255 <= icmp_ln10_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvars_iv_load_reg_269 <= indvars_iv_fu_44;
        select_ln10_reg_274 <= select_ln10_fu_181_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln10_reg_242 <= trunc_ln10_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln8_reg_220 <= trunc_ln8_fu_103_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_load_reg_264 <= x_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln8_fu_107_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln8_fu_107_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_144_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln10_fu_158_p2 == 1'd0) & (tmp_fu_144_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_address0;

assign A_address1 = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_address1;

assign A_ce0 = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_ce0;

assign A_ce1 = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_ce1;

assign A_d0 = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_d0;

assign A_we0 = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_A_we0;

assign add_ln8_1_fu_152_p2 = ($signed(i_1_fu_48) + $signed(64'd18446744073709551615));

assign add_ln8_2_fu_190_p2 = ($signed(indvars_iv_fu_44) + $signed(64'd18446744073709551615));

assign add_ln8_fu_113_p2 = ($signed(n) + $signed(32'd4294967294));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_done == 1'b0) & (icmp_ln10_reg_255 == 1'd1));
end

assign ap_return = (i_0_lcssa_reg_71 + n);

assign empty_fu_164_p1 = i_1_fu_48[6:0];

assign grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start = grp_triangular_Pipeline_VITIS_LOOP_10_2_fu_82_ap_start_reg;

assign i_1_cast_cast_fu_168_p1 = empty_fu_164_p1;

assign i_fu_97_p2 = ($signed(n) + $signed(32'd4294967295));

assign icmp_ln10_fu_158_p2 = (($signed(i_1_fu_48) > $signed(64'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_107_p2 = (($signed(n) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign select_ln10_fu_181_p3 = ((tmp_1_fu_173_p3[0:0] == 1'b1) ? indvars_iv_fu_44 : 64'd0);

assign sext_ln8_fu_119_p1 = $signed(add_ln8_fu_113_p2);

assign tmp_1_fu_173_p3 = indvars_iv_fu_44[32'd63];

assign tmp_fu_144_p3 = i_1_fu_48[32'd63];

assign trunc_ln10_fu_140_p1 = i_1_fu_48[13:0];

assign trunc_ln8_fu_103_p1 = n[13:0];

assign x_address0 = i_1_cast_cast_fu_168_p1;

assign zext_ln8_fu_123_p1 = i_fu_97_p2;

endmodule //triangular
