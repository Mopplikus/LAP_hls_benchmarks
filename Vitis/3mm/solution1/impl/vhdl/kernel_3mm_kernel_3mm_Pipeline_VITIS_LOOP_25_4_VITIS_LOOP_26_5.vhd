-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_3mm_kernel_3mm_Pipeline_VITIS_LOOP_25_4_VITIS_LOOP_26_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_ce1 : OUT STD_LOGIC;
    D_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    F_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    F_ce0 : OUT STD_LOGIC;
    F_we0 : OUT STD_LOGIC;
    F_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_3mm_kernel_3mm_Pipeline_VITIS_LOOP_25_4_VITIS_LOOP_26_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln25_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_reg_755 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln25_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_760_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_355_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln25_reg_764 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln26_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_367_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln25_reg_774 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln25_2_fu_401_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln25_2_reg_783 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_12_fu_409_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_12_reg_797 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_17_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_17_reg_805 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln25_1_fu_424_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln25_1_reg_810 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln25_6_fu_443_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_6_reg_826 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_7_fu_448_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_7_reg_831 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_18_fu_469_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_18_reg_846 : STD_LOGIC_VECTOR (6 downto 0);
    signal C_load_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal C_load_1_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_1_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_1_reg_861 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_8_fu_502_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_8_reg_876 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_13_fu_511_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_13_reg_881 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_11_fu_517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_11_reg_892 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_12_fu_523_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_12_reg_897 : STD_LOGIC_VECTOR (5 downto 0);
    signal D_load_7_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_8_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln25_2_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_2_reg_922 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_3_fu_542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_3_reg_927 : STD_LOGIC_VECTOR (6 downto 0);
    signal C_load_7_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_8_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_13_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_13_reg_957 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_14_fu_564_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_14_reg_962 : STD_LOGIC_VECTOR (5 downto 0);
    signal D_load_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_9_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_2_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln25_4_fu_601_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_4_reg_992 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_5_fu_606_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_5_reg_997 : STD_LOGIC_VECTOR (6 downto 0);
    signal C_load_9_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_15_fu_619_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_15_reg_1017 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_16_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_16_reg_1022 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_fu_629_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_1027 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_1027_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_1027_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal D_load_1_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_2_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_3_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_4_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_3_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_4_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_5_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_load_6_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_5_reg_1092 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_6_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_7_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_8_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_9_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_1_reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_2_reg_1127 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_6_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_6_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_3_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_4_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_5_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_6_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_2_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_2_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_7_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_7_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_8_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_8_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln30_2_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln30_3_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_21_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_22_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_9_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln30_10_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_23_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_4_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln30_11_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_15_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_16_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_5_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln30_6_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_17_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_18_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_7_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln30_8_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_19_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_20_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_474_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten26_fu_98 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_9_fu_346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten26_load : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_322_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_314_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_fu_330_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_383_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_375_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_1_fu_391_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_10_fu_395_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_9_fu_334_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_fu_433_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_cast_fu_457_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_14_fu_514_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_576_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_569_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_fu_583_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_fu_587_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln30_5_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_1_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_4_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_3_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_3mm_mul_32s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_3mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_5_1_U14 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_7_reg_907,
        din1 => C_load_7_reg_932,
        ce => ap_const_logic_1,
        dout => grp_fu_634_p2);

    mul_32s_32s_32_5_1_U15 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_8_reg_912,
        din1 => C_load_8_reg_937,
        ce => ap_const_logic_1,
        dout => grp_fu_638_p2);

    mul_32s_32s_32_5_1_U16 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_reg_967,
        din1 => C_load_reg_851,
        ce => ap_const_logic_1,
        dout => grp_fu_658_p2);

    mul_32s_32s_32_5_1_U17 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_9_reg_972,
        din1 => C_load_9_reg_1002,
        ce => ap_const_logic_1,
        dout => grp_fu_662_p2);

    mul_32s_32s_32_5_1_U18 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_1_reg_1032,
        din1 => C_load_1_reg_856,
        ce => ap_const_logic_1,
        dout => grp_fu_666_p2);

    mul_32s_32s_32_5_1_U19 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_2_reg_1037,
        din1 => C_load_2_reg_977,
        ce => ap_const_logic_1,
        dout => grp_fu_670_p2);

    mul_32s_32s_32_5_1_U20 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_3_reg_1072,
        din1 => C_load_3_reg_1042,
        ce => ap_const_logic_1,
        dout => grp_fu_674_p2);

    mul_32s_32s_32_5_1_U21 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_4_reg_1077,
        din1 => C_load_4_reg_1047,
        ce => ap_const_logic_1,
        dout => grp_fu_678_p2);

    mul_32s_32s_32_5_1_U22 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_5_reg_1092,
        din1 => C_load_5_reg_1082,
        ce => ap_const_logic_1,
        dout => grp_fu_682_p2);

    mul_32s_32s_32_5_1_U23 : component kernel_3mm_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_load_6_reg_1097,
        din1 => C_load_6_reg_1087,
        ce => ap_const_logic_1,
        dout => grp_fu_686_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_3mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    i_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_fu_94 <= ap_const_lv4_0;
            elsif (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_1_fu_94 <= select_ln25_1_fu_424_p3;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln25_fu_340_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten26_fu_98 <= add_ln25_9_fu_346_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_98 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_90 <= ap_const_lv4_0;
            elsif (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_90 <= add_ln26_fu_474_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                C_load_1_reg_856 <= C_q0;
                C_load_reg_851 <= C_q1;
                D_load_7_reg_907 <= D_q1;
                D_load_8_reg_912 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                C_load_2_reg_977 <= C_q1;
                C_load_9_reg_1002 <= C_q0;
                D_load_1_reg_1032 <= D_q1;
                D_load_2_reg_1037 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                C_load_3_reg_1042 <= C_q1;
                C_load_4_reg_1047 <= C_q0;
                D_load_3_reg_1072 <= D_q1;
                D_load_4_reg_1077 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                C_load_5_reg_1082 <= C_q1;
                C_load_6_reg_1087 <= C_q0;
                D_load_5_reg_1092 <= D_q1;
                D_load_6_reg_1097 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                C_load_7_reg_932 <= C_q1;
                C_load_8_reg_937 <= C_q0;
                D_load_9_reg_972 <= D_q0;
                D_load_reg_967 <= D_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    add_ln25_1_reg_861(6 downto 1) <= add_ln25_1_fu_489_p2(6 downto 1);
                    add_ln25_8_reg_876(6 downto 1) <= add_ln25_8_fu_502_p2(6 downto 1);
                add_ln30_11_reg_892 <= add_ln30_11_fu_517_p2;
                add_ln30_12_reg_897 <= add_ln30_12_fu_523_p2;
                    zext_ln30_13_reg_881(3 downto 0) <= zext_ln30_13_fu_511_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    add_ln25_2_reg_922(6 downto 1) <= add_ln25_2_fu_537_p2(6 downto 1);
                    add_ln25_3_reg_927(6 downto 1) <= add_ln25_3_fu_542_p2(6 downto 1);
                add_ln30_13_reg_957 <= add_ln30_13_fu_559_p2;
                add_ln30_14_reg_962 <= add_ln30_14_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    add_ln25_4_reg_992(6 downto 1) <= add_ln25_4_fu_601_p2(6 downto 1);
                    add_ln25_5_reg_997(6 downto 1) <= add_ln25_5_fu_606_p2(6 downto 1);
                add_ln28_1_reg_1027 <= add_ln28_1_fu_629_p2;
                add_ln30_15_reg_1017 <= add_ln30_15_fu_619_p2;
                add_ln30_16_reg_1022 <= add_ln30_16_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_760 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    add_ln25_6_reg_826(6 downto 1) <= add_ln25_6_fu_443_p2(6 downto 1);
                    add_ln25_7_reg_831(6 downto 1) <= add_ln25_7_fu_448_p2(6 downto 1);
                add_ln30_18_reg_846 <= add_ln30_18_fu_469_p2;
                select_ln25_1_reg_810 <= select_ln25_1_fu_424_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln25_reg_764 <= add_ln25_fu_355_p2;
                add_ln30_17_reg_805 <= add_ln30_17_fu_413_p2;
                icmp_ln26_reg_769 <= icmp_ln26_fu_361_p2;
                    select_ln25_2_reg_783(6 downto 1) <= select_ln25_2_fu_401_p3(6 downto 1);
                select_ln25_reg_774 <= select_ln25_fu_367_p3;
                    zext_ln30_12_reg_797(3 downto 0) <= zext_ln30_12_fu_409_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln28_1_reg_1027_pp0_iter1_reg <= add_ln28_1_reg_1027;
                add_ln28_1_reg_1027_pp0_iter2_reg <= add_ln28_1_reg_1027_pp0_iter1_reg;
                add_ln30_8_reg_1172 <= add_ln30_8_fu_725_p2;
                mul_ln30_9_reg_1117 <= grp_fu_662_p2;
                mul_ln30_reg_1112 <= grp_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln30_2_reg_1162 <= add_ln30_2_fu_707_p2;
                mul_ln30_5_reg_1152 <= grp_fu_682_p2;
                mul_ln30_6_reg_1157 <= grp_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_6_reg_1132 <= add_ln30_6_fu_694_p2;
                i_reg_755 <= ap_sig_allocacmp_i;
                icmp_ln25_reg_760 <= icmp_ln25_fu_340_p2;
                icmp_ln25_reg_760_pp0_iter1_reg <= icmp_ln25_reg_760;
                mul_ln30_1_reg_1122 <= grp_fu_666_p2;
                mul_ln30_2_reg_1127 <= grp_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln30_7_reg_1167 <= add_ln30_7_fu_716_p2;
                mul_ln30_7_reg_1102 <= grp_fu_634_p2;
                mul_ln30_8_reg_1107 <= grp_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln30_reg_1147 <= add_ln30_fu_699_p2;
                mul_ln30_3_reg_1137 <= grp_fu_674_p2;
                mul_ln30_4_reg_1142 <= grp_fu_678_p2;
            end if;
        end if;
    end process;
    select_ln25_2_reg_783(0) <= '0';
    zext_ln30_12_reg_797(6 downto 4) <= "000";
    add_ln25_6_reg_826(0) <= '1';
    add_ln25_7_reg_831(0) <= '0';
    add_ln25_1_reg_861(0) <= '0';
    add_ln25_8_reg_876(0) <= '1';
    zext_ln30_13_reg_881(5 downto 4) <= "00";
    add_ln25_2_reg_922(0) <= '1';
    add_ln25_3_reg_927(0) <= '0';
    add_ln25_4_reg_992(0) <= '1';
    add_ln25_5_reg_997(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    C_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln30_3_fu_438_p1, ap_block_pp0_stage2, zext_ln30_10_fu_498_p1, ap_block_pp0_stage3, zext_ln30_11_fu_547_p1, ap_block_pp0_stage4, zext_ln30_6_fu_597_p1, ap_block_pp0_stage0, zext_ln30_8_fu_646_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_address0 <= zext_ln30_8_fu_646_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            C_address0 <= zext_ln30_6_fu_597_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            C_address0 <= zext_ln30_11_fu_547_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            C_address0 <= zext_ln30_10_fu_498_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_address0 <= zext_ln30_3_fu_438_p1(7 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXX";
        end if; 
    end process;


    C_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln30_2_fu_429_p1, ap_block_pp0_stage1, zext_ln30_9_fu_494_p1, ap_block_pp0_stage2, zext_ln30_4_fu_533_p1, ap_block_pp0_stage3, zext_ln30_5_fu_593_p1, ap_block_pp0_stage4, zext_ln30_7_fu_642_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_address1 <= zext_ln30_7_fu_642_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            C_address1 <= zext_ln30_5_fu_593_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            C_address1 <= zext_ln30_4_fu_533_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            C_address1 <= zext_ln30_9_fu_494_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_address1 <= zext_ln30_2_fu_429_p1(7 - 1 downto 0);
        else 
            C_address1 <= "XXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln30_22_fu_464_p1, ap_block_pp0_stage2, zext_ln30_23_fu_529_p1, ap_block_pp0_stage3, zext_ln30_16_fu_555_p1, ap_block_pp0_stage4, zext_ln30_18_fu_615_p1, ap_block_pp0_stage0, zext_ln30_20_fu_654_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            D_address0 <= zext_ln30_20_fu_654_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            D_address0 <= zext_ln30_18_fu_615_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            D_address0 <= zext_ln30_16_fu_555_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            D_address0 <= zext_ln30_23_fu_529_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            D_address0 <= zext_ln30_22_fu_464_p1(7 - 1 downto 0);
        else 
            D_address0 <= "XXXXXXX";
        end if; 
    end process;


    D_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln30_21_fu_453_p1, ap_block_pp0_stage2, j_1_cast_fu_507_p1, ap_block_pp0_stage3, zext_ln30_15_fu_551_p1, ap_block_pp0_stage4, zext_ln30_17_fu_611_p1, ap_block_pp0_stage0, zext_ln30_19_fu_650_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            D_address1 <= zext_ln30_19_fu_650_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            D_address1 <= zext_ln30_17_fu_611_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            D_address1 <= zext_ln30_15_fu_551_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            D_address1 <= j_1_cast_fu_507_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            D_address1 <= zext_ln30_21_fu_453_p1(7 - 1 downto 0);
        else 
            D_address1 <= "XXXXXXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            D_ce1 <= ap_const_logic_1;
        else 
            D_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    F_address0 <= zext_ln28_1_fu_730_p1(7 - 1 downto 0);

    F_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            F_ce0 <= ap_const_logic_1;
        else 
            F_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    F_d0 <= add_ln30_8_reg_1172;

    F_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            F_we0 <= ap_const_logic_1;
        else 
            F_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_1_fu_489_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_2));
    add_ln25_2_fu_537_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_3));
    add_ln25_3_fu_542_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_4));
    add_ln25_4_fu_601_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_5));
    add_ln25_5_fu_606_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_6));
    add_ln25_6_fu_443_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_7));
    add_ln25_7_fu_448_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_8));
    add_ln25_8_fu_502_p2 <= std_logic_vector(unsigned(select_ln25_2_reg_783) + unsigned(ap_const_lv7_9));
    add_ln25_9_fu_346_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten26_load) + unsigned(ap_const_lv7_1));
    add_ln25_fu_355_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln26_fu_474_p2 <= std_logic_vector(unsigned(select_ln25_reg_774) + unsigned(ap_const_lv4_1));
    add_ln28_1_fu_629_p2 <= std_logic_vector(unsigned(add_ln28_fu_587_p2) + unsigned(zext_ln30_12_reg_797));
    add_ln28_fu_587_p2 <= std_logic_vector(unsigned(tmp_6_fu_569_p3) + unsigned(zext_ln28_fu_583_p1));
    add_ln30_10_fu_395_p2 <= std_logic_vector(unsigned(tmp_9_fu_375_p3) + unsigned(zext_ln30_1_fu_391_p1));
    add_ln30_11_fu_517_p2 <= std_logic_vector(unsigned(zext_ln30_14_fu_514_p1) + unsigned(ap_const_lv5_A));
    add_ln30_12_fu_523_p2 <= std_logic_vector(unsigned(zext_ln30_13_fu_511_p1) + unsigned(ap_const_lv6_14));
    add_ln30_13_fu_559_p2 <= std_logic_vector(unsigned(zext_ln30_13_reg_881) + unsigned(ap_const_lv6_1E));
    add_ln30_14_fu_564_p2 <= std_logic_vector(unsigned(zext_ln30_13_reg_881) + unsigned(ap_const_lv6_28));
    add_ln30_15_fu_619_p2 <= std_logic_vector(unsigned(zext_ln30_12_reg_797) + unsigned(ap_const_lv7_32));
    add_ln30_16_fu_624_p2 <= std_logic_vector(unsigned(zext_ln30_12_reg_797) + unsigned(ap_const_lv7_3C));
    add_ln30_17_fu_413_p2 <= std_logic_vector(unsigned(zext_ln30_12_fu_409_p1) + unsigned(ap_const_lv7_46));
    add_ln30_18_fu_469_p2 <= std_logic_vector(unsigned(zext_ln30_12_reg_797) + unsigned(ap_const_lv7_5A));
    add_ln30_1_fu_703_p2 <= std_logic_vector(unsigned(mul_ln30_3_reg_1137) + unsigned(mul_ln30_4_reg_1142));
    add_ln30_2_fu_707_p2 <= std_logic_vector(unsigned(add_ln30_1_fu_703_p2) + unsigned(mul_ln30_2_reg_1127));
    add_ln30_3_fu_721_p2 <= std_logic_vector(unsigned(add_ln30_2_reg_1162) + unsigned(add_ln30_reg_1147));
    add_ln30_4_fu_712_p2 <= std_logic_vector(unsigned(mul_ln30_5_reg_1152) + unsigned(mul_ln30_6_reg_1157));
    add_ln30_5_fu_690_p2 <= std_logic_vector(unsigned(mul_ln30_8_reg_1107) + unsigned(mul_ln30_9_reg_1117));
    add_ln30_6_fu_694_p2 <= std_logic_vector(unsigned(add_ln30_5_fu_690_p2) + unsigned(mul_ln30_7_reg_1102));
    add_ln30_7_fu_716_p2 <= std_logic_vector(unsigned(add_ln30_6_reg_1132) + unsigned(add_ln30_4_fu_712_p2));
    add_ln30_8_fu_725_p2 <= std_logic_vector(unsigned(add_ln30_7_reg_1167) + unsigned(add_ln30_3_fu_721_p2));
    add_ln30_9_fu_334_p2 <= std_logic_vector(unsigned(tmp_7_fu_314_p3) + unsigned(zext_ln30_fu_330_p1));
    add_ln30_fu_699_p2 <= std_logic_vector(unsigned(mul_ln30_1_reg_1122) + unsigned(mul_ln30_reg_1112));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln25_reg_760)
    begin
        if (((icmp_ln25_reg_760 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln25_reg_760_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln25_reg_760_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten26_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten26_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten26_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten26_load <= indvar_flatten26_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_90;
        end if; 
    end process;

    icmp_ln25_fu_340_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten26_load = ap_const_lv7_64) else "0";
    icmp_ln26_fu_361_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    j_1_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_774),64));
    or_ln25_fu_433_p2 <= (select_ln25_2_reg_783 or ap_const_lv7_1);
    select_ln25_1_fu_424_p3 <= 
        add_ln25_reg_764 when (icmp_ln26_reg_769(0) = '1') else 
        i_reg_755;
    select_ln25_2_fu_401_p3 <= 
        add_ln30_10_fu_395_p2 when (icmp_ln26_fu_361_p2(0) = '1') else 
        add_ln30_9_fu_334_p2;
    select_ln25_fu_367_p3 <= 
        ap_const_lv4_0 when (icmp_ln26_fu_361_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_10_fu_576_p3 <= (select_ln25_1_reg_810 & ap_const_lv1_0);
    tmp_13_cast_fu_457_p3 <= (ap_const_lv3_5 & select_ln25_reg_774);
    tmp_6_fu_569_p3 <= (select_ln25_1_reg_810 & ap_const_lv3_0);
    tmp_7_fu_314_p3 <= (ap_sig_allocacmp_i & ap_const_lv3_0);
    tmp_8_fu_322_p3 <= (ap_sig_allocacmp_i & ap_const_lv1_0);
    tmp_9_fu_375_p3 <= (add_ln25_fu_355_p2 & ap_const_lv3_0);
    tmp_s_fu_383_p3 <= (add_ln25_fu_355_p2 & ap_const_lv1_0);
    zext_ln28_1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_reg_1027_pp0_iter2_reg),64));
    zext_ln28_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_576_p3),7));
    zext_ln30_10_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_7_reg_831),64));
    zext_ln30_11_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_8_reg_876),64));
    zext_ln30_12_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_fu_367_p3),7));
    zext_ln30_13_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_774),6));
    zext_ln30_14_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_774),5));
    zext_ln30_15_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_11_reg_892),64));
    zext_ln30_16_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_12_reg_897),64));
    zext_ln30_17_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_13_reg_957),64));
    zext_ln30_18_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_14_reg_962),64));
    zext_ln30_19_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_15_reg_1017),64));
    zext_ln30_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_383_p3),7));
    zext_ln30_20_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_16_reg_1022),64));
    zext_ln30_21_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_17_reg_805),64));
    zext_ln30_22_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_cast_fu_457_p3),64));
    zext_ln30_23_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_18_reg_846),64));
    zext_ln30_2_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_2_reg_783),64));
    zext_ln30_3_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_fu_433_p2),64));
    zext_ln30_4_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_1_reg_861),64));
    zext_ln30_5_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_2_reg_922),64));
    zext_ln30_6_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_3_reg_927),64));
    zext_ln30_7_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_4_reg_992),64));
    zext_ln30_8_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_5_reg_997),64));
    zext_ln30_9_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_6_reg_826),64));
    zext_ln30_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_322_p3),7));
end behav;
