// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gaussian_gaussian,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck24-ubva530-2LV-c,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.420000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=251,HLS_SYN_LUT=549,HLS_VERSION=2022_2}" *)

module gaussian (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_address0,
        c_ce0,
        c_q0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
output  [8:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [8:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] j_1_reg_214;
wire    ap_CS_fsm_state2;
reg   [4:0] idx_load_reg_222;
wire   [0:0] icmp_ln8_fu_108_p2;
wire   [8:0] mul_ln8_fu_129_p2;
reg   [8:0] mul_ln8_reg_233;
wire   [8:0] add_ln16_fu_186_p2;
reg   [8:0] add_ln16_reg_238;
wire    ap_CS_fsm_state3;
reg   [31:0] c_load_reg_243;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_done;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_idle;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_ready;
wire   [8:0] grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_address0;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_ce0;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_we0;
wire   [31:0] grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_d0;
wire   [8:0] grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_address1;
wire    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_ce1;
reg    grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln8_fu_120_p1;
reg   [4:0] idx_fu_54;
wire   [4:0] add_ln8_1_fu_141_p2;
reg   [4:0] j_fu_58;
wire   [4:0] add_ln8_fu_135_p2;
reg   [4:0] indvars_iv1_fu_62;
wire   [4:0] add_ln8_2_fu_147_p2;
wire   [4:0] mul_ln8_fu_129_p0;
wire   [5:0] mul_ln8_fu_129_p1;
wire   [6:0] tmp_1_fu_175_p3;
wire   [8:0] tmp_fu_168_p3;
wire   [8:0] zext_ln16_fu_182_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [8:0] mul_ln8_fu_129_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start_reg = 1'b0;
end

gaussian_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3 grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start),
    .ap_done(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_done),
    .ap_idle(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_idle),
    .ap_ready(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_ready),
    .zext_ln8_1(j_1_reg_214),
    .bound(mul_ln8_reg_233),
    .A_address0(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_address0),
    .A_ce0(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_ce0),
    .A_we0(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_we0),
    .A_d0(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_d0),
    .A_q0(A_q0),
    .A_address1(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_address1),
    .A_ce1(grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_ce1),
    .A_q1(A_q1),
    .add_ln16(add_ln16_reg_238),
    .c_load(c_load_reg_243)
);

gaussian_mul_5ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_5ns_6ns_9_1_1_U8(
    .din0(mul_ln8_fu_129_p0),
    .din1(mul_ln8_fu_129_p1),
    .dout(mul_ln8_fu_129_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start_reg <= 1'b1;
        end else if ((grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_ready == 1'b1)) begin
            grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_fu_54 <= 5'd1;
    end else if (((icmp_ln8_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_54 <= add_ln8_1_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv1_fu_62 <= 5'd17;
    end else if (((icmp_ln8_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv1_fu_62 <= add_ln8_2_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_58 <= 5'd2;
    end else if (((icmp_ln8_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_58 <= add_ln8_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln16_reg_238[8 : 2] <= add_ln16_fu_186_p2[8 : 2];
        c_load_reg_243 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_load_reg_222 <= idx_fu_54;
        mul_ln8_reg_233 <= mul_ln8_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_1_reg_214 <= j_fu_58;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_address0;

assign A_address1 = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_address1;

assign A_ce0 = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_ce0;

assign A_ce1 = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_ce1;

assign A_d0 = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_d0;

assign A_we0 = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_A_we0;

assign add_ln16_fu_186_p2 = (tmp_fu_168_p3 + zext_ln16_fu_182_p1);

assign add_ln8_1_fu_141_p2 = (idx_fu_54 + 5'd1);

assign add_ln8_2_fu_147_p2 = ($signed(indvars_iv1_fu_62) + $signed(5'd31));

assign add_ln8_fu_135_p2 = (j_fu_58 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign c_address0 = zext_ln8_fu_120_p1;

assign grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start = grp_gaussian_Pipeline_VITIS_LOOP_8_2_VITIS_LOOP_12_3_fu_79_ap_start_reg;

assign icmp_ln8_fu_108_p2 = ((j_fu_58 == 5'd19) ? 1'b1 : 1'b0);

assign mul_ln8_fu_129_p0 = mul_ln8_fu_129_p00;

assign mul_ln8_fu_129_p00 = indvars_iv1_fu_62;

assign mul_ln8_fu_129_p1 = 9'd19;

assign tmp_1_fu_175_p3 = {{idx_load_reg_222}, {2'd0}};

assign tmp_fu_168_p3 = {{idx_load_reg_222}, {4'd0}};

assign zext_ln16_fu_182_p1 = tmp_1_fu_175_p3;

assign zext_ln8_fu_120_p1 = idx_fu_54;

always @ (posedge ap_clk) begin
    add_ln16_reg_238[1:0] <= 2'b00;
end

endmodule //gaussian
