-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bicg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    q_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    q_ce0 : OUT STD_LOGIC;
    q_we0 : OUT STD_LOGIC;
    q_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    q_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    p_ce0 : OUT STD_LOGIC;
    p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    p_ce1 : OUT STD_LOGIC;
    p_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bicg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bicg_bicg,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck24-ubva530-2LV-c,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.601000,HLS_SYN_LAT=918,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4772,HLS_SYN_LUT=4414,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_load_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_load_1_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_2_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_load_3_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_4_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_load_5_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_6_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_load_7_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_8_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_load_9_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_10_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_load_11_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_12_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_load_13_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_14_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_load_15_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_16_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_load_17_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_18_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_load_19_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_20_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_load_21_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_22_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_load_23_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_24_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_load_25_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_26_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_load_27_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_load_28_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_load_29_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_idle : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_ready : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_ce0 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_we0 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_ce1 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_we1 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_ce0 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_ce1 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_ce0 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_we0 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_r_ce0 : STD_LOGIC;
    signal grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bicg_bicg_Pipeline_VITIS_LOOP_9_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        q_ce0 : OUT STD_LOGIC;
        q_we0 : OUT STD_LOGIC;
        q_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        q_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_15 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_23 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_load_29 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367 : component bicg_bicg_Pipeline_VITIS_LOOP_9_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start,
        ap_done => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done,
        ap_idle => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_idle,
        ap_ready => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_ready,
        s_address0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_address0,
        s_ce0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_ce0,
        s_we0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_we0,
        s_d0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_d0,
        s_q0 => s_q0,
        s_address1 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_address1,
        s_ce1 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_ce1,
        s_we1 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_we1,
        s_d1 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_d1,
        s_q1 => s_q1,
        A_address0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_address0,
        A_ce0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_ce0,
        A_q0 => A_q0,
        A_address1 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_address1,
        A_ce1 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_ce1,
        A_q1 => A_q1,
        q_address0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_address0,
        q_ce0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_ce0,
        q_we0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_we0,
        q_d0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_d0,
        q_q0 => q_q0,
        r_address0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_r_address0,
        r_ce0 => grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_r_ce0,
        r_q0 => r_q0,
        p_load => p_load_reg_421,
        p_load_1 => p_load_1_reg_426,
        p_load_2 => p_load_2_reg_441,
        p_load_3 => p_load_3_reg_446,
        p_load_4 => p_load_4_reg_461,
        p_load_5 => p_load_5_reg_466,
        p_load_6 => p_load_6_reg_481,
        p_load_7 => p_load_7_reg_486,
        p_load_8 => p_load_8_reg_501,
        p_load_9 => p_load_9_reg_506,
        p_load_10 => p_load_10_reg_521,
        p_load_11 => p_load_11_reg_526,
        p_load_12 => p_load_12_reg_541,
        p_load_13 => p_load_13_reg_546,
        p_load_14 => p_load_14_reg_561,
        p_load_15 => p_load_15_reg_566,
        p_load_16 => p_load_16_reg_581,
        p_load_17 => p_load_17_reg_586,
        p_load_18 => p_load_18_reg_601,
        p_load_19 => p_load_19_reg_606,
        p_load_20 => p_load_20_reg_621,
        p_load_21 => p_load_21_reg_626,
        p_load_22 => p_load_22_reg_641,
        p_load_23 => p_load_23_reg_646,
        p_load_24 => p_load_24_reg_661,
        p_load_25 => p_load_25_reg_666,
        p_load_26 => p_load_26_reg_681,
        p_load_27 => p_load_27_reg_686,
        p_load_28 => p_load_28_reg_701,
        p_load_29 => p_load_29_reg_706);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_ready = ap_const_logic_1)) then 
                    grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_load_10_reg_521 <= p_q1;
                p_load_11_reg_526 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_load_12_reg_541 <= p_q1;
                p_load_13_reg_546 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_load_14_reg_561 <= p_q1;
                p_load_15_reg_566 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_load_16_reg_581 <= p_q1;
                p_load_17_reg_586 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                p_load_18_reg_601 <= p_q1;
                p_load_19_reg_606 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_load_1_reg_426 <= p_q0;
                p_load_reg_421 <= p_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_load_20_reg_621 <= p_q1;
                p_load_21_reg_626 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_load_22_reg_641 <= p_q1;
                p_load_23_reg_646 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_load_24_reg_661 <= p_q1;
                p_load_25_reg_666 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                p_load_26_reg_681 <= p_q1;
                p_load_27_reg_686 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_load_28_reg_701 <= p_q1;
                p_load_29_reg_706 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_load_2_reg_441 <= p_q1;
                p_load_3_reg_446 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_load_4_reg_461 <= p_q1;
                p_load_5_reg_466 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_load_6_reg_481 <= p_q1;
                p_load_7_reg_486 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_load_8_reg_501 <= p_q1;
                p_load_9_reg_506 <= p_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_address0;
    A_address1 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_address1;
    A_ce0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_ce0;
    A_ce1 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_A_ce1;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done)
    begin
        if ((grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done, ap_CS_fsm_state17)
    begin
        if (((grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done, ap_CS_fsm_state17)
    begin
        if (((grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_ap_start_reg;

    p_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            p_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            p_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            p_address0 <= "XXXXX";
        end if; 
    end process;


    p_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            p_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            p_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            p_address1 <= "XXXXX";
        end if; 
    end process;


    p_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ce1 <= ap_const_logic_1;
        else 
            p_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    q_address0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_address0;
    q_ce0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_ce0;
    q_d0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_d0;
    q_we0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_q_we0;
    r_address0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_r_address0;
    r_ce0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_r_ce0;
    s_address0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_address0;
    s_address1 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_address1;
    s_ce0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_ce0;
    s_ce1 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_ce1;
    s_d0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_d0;
    s_d1 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_d1;
    s_we0 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_we0;
    s_we1 <= grp_bicg_Pipeline_VITIS_LOOP_9_1_fu_367_s_we1;
end behav;
