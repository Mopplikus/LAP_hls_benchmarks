-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_3mm_kernel_3mm_Pipeline_VITIS_LOOP_16_4_VITIS_LOOP_17_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    D_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    D_ce1 : OUT STD_LOGIC;
    D_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    F_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    F_ce0 : OUT STD_LOGIC;
    F_we0 : OUT STD_LOGIC;
    F_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    F_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_3mm_kernel_3mm_Pipeline_VITIS_LOOP_16_4_VITIS_LOOP_17_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_5A : STD_LOGIC_VECTOR (6 downto 0) := "1011010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln16_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_834 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_427_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_reg_843 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln17_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_439_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_reg_853 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_2_fu_473_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln16_2_reg_862 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_12_fu_497_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_12_reg_884 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_13_fu_586_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_13_reg_931 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_fu_651_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_1_reg_966 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_4_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_4_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal F_addr_reg_997 : STD_LOGIC_VECTOR (6 downto 0);
    signal D_load_8_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_load_9_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_2_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_2_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_8_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_8_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_9_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_9_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln21_2_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln21_3_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_19_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_20_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_7_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln21_8_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_15_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_4_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln21_5_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_16_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_17_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_6_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln21_9_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_18_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_21_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_10_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln21_11_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_22_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_23_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_1_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_fu_704_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten26_fu_98 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_9_fu_418_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten26_load : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_394_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_386_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_402_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_455_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_447_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_1_fu_463_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_11_fu_467_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_10_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln16_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_16_fu_501_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_17_fu_512_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_4_fu_528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_5_fu_538_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_14_fu_552_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_12_fu_555_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_1_fu_566_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_2_fu_576_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_13_fu_589_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_14_fu_600_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln16_3_fu_611_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_6_fu_621_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_15_fu_631_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_18_fu_641_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_7_fu_656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_8_fu_666_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_cast_fu_676_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_19_fu_688_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_726_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_719_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_fu_733_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_fu_737_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_1_fu_743_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_1_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_6_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_7_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_5_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_8_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_3_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_3mm_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_3mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U11 : component kernel_3mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_301,
        din1 => reg_309,
        dout => grp_fu_325_p2);

    mul_32s_32s_32_1_1_U12 : component kernel_3mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_305,
        din1 => reg_313,
        dout => grp_fu_331_p2);

    mul_32s_32s_32_1_1_U13 : component kernel_3mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_317,
        din1 => reg_293,
        dout => grp_fu_337_p2);

    mul_32s_32s_32_1_1_U14 : component kernel_3mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_321,
        din1 => reg_297,
        dout => grp_fu_343_p2);

    mul_32s_32s_32_1_1_U15 : component kernel_3mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => D_load_8_reg_1002,
        din1 => reg_309,
        dout => mul_ln21_8_fu_771_p2);

    mul_32s_32s_32_1_1_U16 : component kernel_3mm_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => D_load_9_reg_1007,
        din1 => reg_313,
        dout => mul_ln21_9_fu_776_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_3mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_fu_94 <= ap_const_lv4_0;
            elsif (((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                i_1_fu_94 <= select_ln16_1_fu_651_p3;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_412_p2 = ap_const_lv1_0))) then 
                    indvar_flatten26_fu_98 <= add_ln16_9_fu_418_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_98 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_90 <= ap_const_lv4_0;
            elsif (((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                j_fu_90 <= add_ln17_fu_704_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                D_load_8_reg_1002 <= D_q1;
                D_load_9_reg_1007 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                F_addr_reg_997 <= zext_ln19_1_fu_748_p1(7 - 1 downto 0);
                i_reg_834 <= ap_sig_allocacmp_i;
                icmp_ln16_reg_839 <= icmp_ln16_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln16_fu_412_p2 = ap_const_lv1_0))) then
                add_ln16_reg_843 <= add_ln16_fu_427_p2;
                icmp_ln17_reg_848 <= icmp_ln17_fu_433_p2;
                    select_ln16_2_reg_862(6 downto 1) <= select_ln16_2_fu_473_p3(6 downto 1);
                select_ln16_reg_853 <= select_ln16_fu_439_p3;
                    zext_ln21_12_reg_884(3 downto 0) <= zext_ln21_12_fu_497_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln21_2_reg_1017 <= add_ln21_2_fu_765_p2;
                add_ln21_reg_1012 <= add_ln21_fu_753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln21_4_reg_992 <= add_ln21_4_fu_698_p2;
                select_ln16_1_reg_966 <= select_ln16_1_fu_651_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln21_8_reg_1022 <= mul_ln21_8_fu_771_p2;
                mul_ln21_9_reg_1027 <= mul_ln21_9_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_293 <= C_q1;
                reg_297 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_301 <= D_q1;
                reg_305 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_309 <= C_q1;
                reg_313 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_317 <= D_q1;
                reg_321 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_349 <= grp_fu_325_p2;
                reg_353 <= grp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_357 <= grp_fu_337_p2;
                reg_361 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_839 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    zext_ln21_13_reg_931(3 downto 0) <= zext_ln21_13_fu_586_p1(3 downto 0);
            end if;
        end if;
    end process;
    select_ln16_2_reg_862(0) <= '0';
    zext_ln21_12_reg_884(6 downto 4) <= "000";
    zext_ln21_13_reg_931(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    C_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln21_3_fu_492_p1, ap_block_pp0_stage1, zext_ln21_8_fu_543_p1, ap_block_pp0_stage2, zext_ln21_5_fu_581_p1, ap_block_pp0_stage3, zext_ln21_9_fu_626_p1, ap_block_pp0_stage4, zext_ln21_11_fu_671_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                C_address0 <= zext_ln21_11_fu_671_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                C_address0 <= zext_ln21_9_fu_626_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                C_address0 <= zext_ln21_5_fu_581_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                C_address0 <= zext_ln21_8_fu_543_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                C_address0 <= zext_ln21_3_fu_492_p1(7 - 1 downto 0);
            else 
                C_address0 <= "XXXXXXX";
            end if;
        else 
            C_address0 <= "XXXXXXX";
        end if; 
    end process;


    C_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln21_2_fu_481_p1, ap_block_pp0_stage0, zext_ln21_7_fu_533_p1, ap_block_pp0_stage1, zext_ln21_4_fu_571_p1, ap_block_pp0_stage2, zext_ln21_6_fu_616_p1, ap_block_pp0_stage3, zext_ln21_10_fu_661_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                C_address1 <= zext_ln21_10_fu_661_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                C_address1 <= zext_ln21_6_fu_616_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                C_address1 <= zext_ln21_4_fu_571_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                C_address1 <= zext_ln21_7_fu_533_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                C_address1 <= zext_ln21_2_fu_481_p1(7 - 1 downto 0);
            else 
                C_address1 <= "XXXXXXX";
            end if;
        else 
            C_address1 <= "XXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln21_20_fu_518_p1, ap_block_pp0_stage1, zext_ln21_15_fu_561_p1, ap_block_pp0_stage2, zext_ln21_17_fu_606_p1, ap_block_pp0_stage3, zext_ln21_21_fu_646_p1, ap_block_pp0_stage4, zext_ln21_23_fu_693_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                D_address0 <= zext_ln21_23_fu_693_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                D_address0 <= zext_ln21_21_fu_646_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                D_address0 <= zext_ln21_17_fu_606_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                D_address0 <= zext_ln21_15_fu_561_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                D_address0 <= zext_ln21_20_fu_518_p1(7 - 1 downto 0);
            else 
                D_address0 <= "XXXXXXX";
            end if;
        else 
            D_address0 <= "XXXXXXX";
        end if; 
    end process;


    D_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln21_19_fu_507_p1, ap_block_pp0_stage1, j_1_cast_fu_548_p1, ap_block_pp0_stage2, zext_ln21_16_fu_595_p1, ap_block_pp0_stage3, zext_ln21_18_fu_636_p1, ap_block_pp0_stage4, zext_ln21_22_fu_683_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                D_address1 <= zext_ln21_22_fu_683_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                D_address1 <= zext_ln21_18_fu_636_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                D_address1 <= zext_ln21_16_fu_595_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                D_address1 <= j_1_cast_fu_548_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                D_address1 <= zext_ln21_19_fu_507_p1(7 - 1 downto 0);
            else 
                D_address1 <= "XXXXXXX";
            end if;
        else 
            D_address1 <= "XXXXXXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            D_ce1 <= ap_const_logic_1;
        else 
            D_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    F_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, F_addr_reg_997, ap_block_pp0_stage0, ap_block_pp0_stage3, zext_ln19_1_fu_748_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                F_address0 <= F_addr_reg_997;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                F_address0 <= zext_ln19_1_fu_748_p1(7 - 1 downto 0);
            else 
                F_address0 <= "XXXXXXX";
            end if;
        else 
            F_address0 <= "XXXXXXX";
        end if; 
    end process;


    F_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            F_ce0 <= ap_const_logic_1;
        else 
            F_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    F_d0 <= std_logic_vector(unsigned(add_ln21_8_fu_800_p2) + unsigned(add_ln21_3_fu_781_p2));

    F_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            F_we0 <= ap_const_logic_1;
        else 
            F_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln16_1_fu_566_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_2));
    add_ln16_2_fu_576_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_3));
    add_ln16_3_fu_611_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_4));
    add_ln16_4_fu_528_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_5));
    add_ln16_5_fu_538_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_6));
    add_ln16_6_fu_621_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_7));
    add_ln16_7_fu_656_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_8));
    add_ln16_8_fu_666_p2 <= std_logic_vector(unsigned(select_ln16_2_reg_862) + unsigned(ap_const_lv7_9));
    add_ln16_9_fu_418_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten26_load) + unsigned(ap_const_lv7_1));
    add_ln16_fu_427_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln17_fu_704_p2 <= std_logic_vector(unsigned(select_ln16_reg_853) + unsigned(ap_const_lv4_1));
    add_ln19_1_fu_743_p2 <= std_logic_vector(unsigned(add_ln19_fu_737_p2) + unsigned(zext_ln21_12_reg_884));
    add_ln19_fu_737_p2 <= std_logic_vector(unsigned(tmp_9_fu_719_p3) + unsigned(zext_ln19_fu_733_p1));
    add_ln21_10_fu_406_p2 <= std_logic_vector(unsigned(tmp_s_fu_386_p3) + unsigned(zext_ln21_fu_402_p1));
    add_ln21_11_fu_467_p2 <= std_logic_vector(unsigned(tmp_7_fu_447_p3) + unsigned(zext_ln21_1_fu_463_p1));
    add_ln21_12_fu_555_p2 <= std_logic_vector(unsigned(zext_ln21_14_fu_552_p1) + unsigned(ap_const_lv5_A));
    add_ln21_13_fu_589_p2 <= std_logic_vector(unsigned(zext_ln21_13_fu_586_p1) + unsigned(ap_const_lv6_14));
    add_ln21_14_fu_600_p2 <= std_logic_vector(unsigned(zext_ln21_13_fu_586_p1) + unsigned(ap_const_lv6_1E));
    add_ln21_15_fu_631_p2 <= std_logic_vector(unsigned(zext_ln21_13_reg_931) + unsigned(ap_const_lv6_28));
    add_ln21_16_fu_501_p2 <= std_logic_vector(unsigned(zext_ln21_12_fu_497_p1) + unsigned(ap_const_lv7_32));
    add_ln21_17_fu_512_p2 <= std_logic_vector(unsigned(zext_ln21_12_fu_497_p1) + unsigned(ap_const_lv7_3C));
    add_ln21_18_fu_641_p2 <= std_logic_vector(unsigned(zext_ln21_12_reg_884) + unsigned(ap_const_lv7_46));
    add_ln21_19_fu_688_p2 <= std_logic_vector(unsigned(zext_ln21_12_reg_884) + unsigned(ap_const_lv7_5A));
    add_ln21_1_fu_759_p2 <= std_logic_vector(unsigned(reg_349) + unsigned(reg_353));
    add_ln21_2_fu_765_p2 <= std_logic_vector(unsigned(add_ln21_1_fu_759_p2) + unsigned(reg_361));
    add_ln21_3_fu_781_p2 <= std_logic_vector(unsigned(add_ln21_2_reg_1017) + unsigned(add_ln21_reg_1012));
    add_ln21_4_fu_698_p2 <= std_logic_vector(unsigned(reg_349) + unsigned(reg_353));
    add_ln21_5_fu_785_p2 <= std_logic_vector(unsigned(add_ln21_4_reg_992) + unsigned(reg_357));
    add_ln21_6_fu_790_p2 <= std_logic_vector(unsigned(mul_ln21_8_reg_1022) + unsigned(mul_ln21_9_reg_1027));
    add_ln21_7_fu_794_p2 <= std_logic_vector(unsigned(add_ln21_6_fu_790_p2) + unsigned(reg_361));
    add_ln21_8_fu_800_p2 <= std_logic_vector(unsigned(add_ln21_7_fu_794_p2) + unsigned(add_ln21_5_fu_785_p2));
    add_ln21_fu_753_p2 <= std_logic_vector(unsigned(F_q0) + unsigned(reg_357));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln16_reg_839)
    begin
        if (((icmp_ln16_reg_839 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten26_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten26_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten26_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten26_load <= indvar_flatten26_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_90;
        end if; 
    end process;

    icmp_ln16_fu_412_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten26_load = ap_const_lv7_64) else "0";
    icmp_ln17_fu_433_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    j_1_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_853),64));
    or_ln16_fu_486_p2 <= (select_ln16_2_fu_473_p3 or ap_const_lv7_1);
    select_ln16_1_fu_651_p3 <= 
        add_ln16_reg_843 when (icmp_ln17_reg_848(0) = '1') else 
        i_reg_834;
    select_ln16_2_fu_473_p3 <= 
        add_ln21_11_fu_467_p2 when (icmp_ln17_fu_433_p2(0) = '1') else 
        add_ln21_10_fu_406_p2;
    select_ln16_fu_439_p3 <= 
        ap_const_lv4_0 when (icmp_ln17_fu_433_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_10_fu_726_p3 <= (select_ln16_1_reg_966 & ap_const_lv1_0);
    tmp_16_cast_fu_676_p3 <= (ap_const_lv3_5 & select_ln16_reg_853);
    tmp_6_fu_394_p3 <= (ap_sig_allocacmp_i & ap_const_lv1_0);
    tmp_7_fu_447_p3 <= (add_ln16_fu_427_p2 & ap_const_lv3_0);
    tmp_8_fu_455_p3 <= (add_ln16_fu_427_p2 & ap_const_lv1_0);
    tmp_9_fu_719_p3 <= (select_ln16_1_reg_966 & ap_const_lv3_0);
    tmp_s_fu_386_p3 <= (ap_sig_allocacmp_i & ap_const_lv3_0);
    zext_ln19_1_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_1_fu_743_p2),64));
    zext_ln19_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_726_p3),7));
    zext_ln21_10_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_7_fu_656_p2),64));
    zext_ln21_11_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_8_fu_666_p2),64));
    zext_ln21_12_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_fu_439_p3),7));
    zext_ln21_13_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_853),6));
    zext_ln21_14_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_853),5));
    zext_ln21_15_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_12_fu_555_p2),64));
    zext_ln21_16_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_13_fu_589_p2),64));
    zext_ln21_17_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_14_fu_600_p2),64));
    zext_ln21_18_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_15_fu_631_p2),64));
    zext_ln21_19_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_16_fu_501_p2),64));
    zext_ln21_1_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_455_p3),7));
    zext_ln21_20_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_17_fu_512_p2),64));
    zext_ln21_21_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_18_fu_641_p2),64));
    zext_ln21_22_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_cast_fu_676_p3),64));
    zext_ln21_23_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_19_fu_688_p2),64));
    zext_ln21_2_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_473_p3),64));
    zext_ln21_3_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_fu_486_p2),64));
    zext_ln21_4_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_566_p2),64));
    zext_ln21_5_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_2_fu_576_p2),64));
    zext_ln21_6_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_3_fu_611_p2),64));
    zext_ln21_7_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_4_fu_528_p2),64));
    zext_ln21_8_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_5_fu_538_p2),64));
    zext_ln21_9_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_6_fu_621_p2),64));
    zext_ln21_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_394_p3),7));
end behav;
